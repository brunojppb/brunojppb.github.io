<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://bpaulino.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bpaulino.com/" rel="alternate" type="text/html" /><updated>2022-10-06T20:16:27+00:00</updated><id>https://bpaulino.com/feed.xml</id><title type="html">bpaulino.com</title><subtitle>I am Bruno Paulino. Software is my craft.</subtitle><author><name>Bruno Paulino</name></author><entry><title type="html">The TypeScript Monorepo Series</title><link href="https://bpaulino.com/entries/typescript-monorepo-series-what-is-a-monorepo" rel="alternate" type="text/html" title="The TypeScript Monorepo Series" /><published>2022-08-28T00:00:00+00:00</published><updated>2022-08-28T00:00:00+00:00</updated><id>https://bpaulino.com/entries/ts-monorepo-series-part-1</id><content type="html" xml:base="https://bpaulino.com/entries/typescript-monorepo-series-what-is-a-monorepo">&lt;p&gt;Welcome to the TypeScript monorepo article series. In this series, you will
learn about what a monorepo is, why it’s becoming so popular today and how you
can build your own production-ready monorepo with a Web application, a
documentation website and a component library, all built with
&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are working on a small and isolated app, chances are that you probably
don’t need a monorepo, but if you are building several different apps and small
libraries that somehow are related or dependent on each other, specially if you
are working on a large team, a monorepo is most probably the best strategy to
organize your code. It will make your code much closer to the engineers working
on them and will give your team a great productivity boost in the short and
long-run by sharing common standards.&lt;/p&gt;

&lt;p&gt;So bear with me and let’s do a deep dive into monorepos by creating a rock-solid
version of it that you and your team is going to love to use. By the end of this
series, you will have a complete TypeScript monorepo template to start your
projects with the right foot, including dependency management, CI/CD with
parallel task execution and caching to avoid unnecessary work, testing
pipelines, commit strategy that drives automated releases with automatic
changelog generation.&lt;/p&gt;

&lt;h2 id=&quot;but-what-is-a-monorepo-anyways&quot;&gt;But what is a monorepo anyways?&lt;/h2&gt;

&lt;p&gt;Before jumping to definitions, let’s take a step back and understand how teams
usually go about creating new software projects and how they manage their
codebases.&lt;/p&gt;

&lt;p&gt;Teams across the globe need a way to share code. And the &lt;em&gt;de facto&lt;/em&gt; standard is
&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt;. Along this series, we will create a git repo for a
hypothetical use-case where we need a Web app while we discuss the challenges
that a team might face along the way.&lt;/p&gt;

&lt;p&gt;When starting out, you usually create a git repository offline on your machine
and eventually you share your code with your team using the platform of your
choice, the most popular being &lt;a href=&quot;https://github.com/&quot;&gt;Github.&lt;/a&gt; This repository is
usually the house of your app. It’s where it lives your business logic, build
and deployment pipelines, automated tests (hopefully) and the history of your
changes.&lt;/p&gt;

&lt;p&gt;When starting a new project, you usually do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a new Git repo&lt;/li&gt;
  &lt;li&gt;Setup your project from scratch or based on a template with build, test and
deployment pipelines&lt;/li&gt;
  &lt;li&gt;Configure tools to help you with your development workflow, for instance a dev
server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the initial setup is done, you go about your work building your Web app for
your users.&lt;/p&gt;

&lt;h3 id=&quot;now-we-need-a-component-library&quot;&gt;Now we need a component library&lt;/h3&gt;

&lt;p&gt;Things are all good and fine, but now your team needs to build a component
library with common standards like buttons, colors, spacing, fonts and all the
visual identity of your brand because your product team needs a new Web app to
manage its customers and one of the requirements is that it must look and feel
like your current one.&lt;/p&gt;

&lt;p&gt;This component library uses the same technologies you are using to build your
Web app like TypeScript and a very similar, but different, build pipeline. So to
start working on this new component library, you usually have two choices:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Build the component library as a subdirectory of your app, just like any
other shared module.&lt;/li&gt;
  &lt;li&gt;Decouple your component library from your app in a separate repository so
engineers can work independently on both the App and the Component library.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s break these options down and explore their trade-offs next.&lt;/p&gt;

&lt;h4 id=&quot;option-1-building-as-a-subdirectory&quot;&gt;Option 1: Building as a subdirectory&lt;/h4&gt;

&lt;p&gt;Building the new component library within our existing Web app has clear
advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Your entire setup is already in place.&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;You can start creating your component library right away and make use of
your testing and build pipelines. Your Web app can use these components with
no ceremony.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Team collaboration is high&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Having the team working on the Web app and Component library all together
under the same repo will be a lot easier for collaboration. They can review
each other’s PRs, quickly test changes locally without extra setup and share
the same standards, significantly reducing mental overhead.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But there are a few drawbacks with this approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;You cannot version your components.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Which means that if you make a breaking change on your Button component,
your entire Web app needs to be changed in one go, otherwise you will not be
able to build your app.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;nobody else can use your component library.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Eventually, you might need to build an internal Web app to manage your
customers and ideally this internal Web app could have the same visual
identity as your public app. But given the Component library is tightly
coupled with your Web app, you can’t easily share your components outside of
your repo. Copy/paste is no fun.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;option-2-creating-a-new-repository&quot;&gt;Option 2: Creating a new repository&lt;/h4&gt;

&lt;p&gt;If the trade-offs of option 1 are not acceptable, you need an alternative way,
so the usual route taken by most teams is to go and create a new repository and
make your component library an independent package. This approach has several
benefits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You can version your components&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;You can now make breaking changes to your components and as long as you
publish different versions of your library to a registry like
&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;, consumers of your component library can
remain safe until they decide to upgrade to the newest version of your
component library.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;More than one app can use your components&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Since you now publish your component library as an independent package,
other apps can now use it just as any other library out there. They can
quickly run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install @acme/components&lt;/code&gt; and be ready to go.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But like any architecture choices, there are trade-offs we must consider:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You can no longer make sure that your app is using the latest version of
your components&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This might be a desired side-effect, so you can actually let you team adopt
the new versions of your component library in an incremental way. On the
other hand, if you don’t prioritize library upgrades, the change drift of
what you have on your Web app and the newest version of your component
library might be so large that upgrading can become a nightmare.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;You now have two codebases to worry about&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Let’s face it, setting up a project from the ground up, with all it’s build,
test and deployment pipelines in a way that is ready for production and with
great developer experience takes time. Now you have two repositories to keep
dependencies and pipelines all updated and secure. This can become a major
mental overhead for your team, specially if you cannot afford to have a
dedicated team member or a platform team to support you with these tasks.
Your Web app and Component library repositories will grow apart and they
will eventually have divergent standards. Questions like “Which version of
TypeScript we are using?” or “Which Node version we are using now?” will get
harder to answer and even harder to make sure that everyone is at the same
page.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Engineers cannot collaborate in the same codebase anymore&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;You now have two independent codebases where engineers need to implement new
features, make changes, review pull-requests and push code to production.
But now they are far apart in two different repositories, which means that
engineers cannot review changes in a single place anymore. If they want to
checkout these changes locally, they will need to have the repositories all
setup locally and if it’s their first time working on the component library,
they might need to prepare their local environment from scratch to be able
to run and explore the code.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;but-what-is-the-alternative&quot;&gt;But what is the alternative?&lt;/h2&gt;

&lt;p&gt;With all the being said, there are plenty of trade-offs here that might be hard
to reach to a compromise. Both options 1 and 2 mentioned above are perfectly
reasonable, but it will really depend on the context you are working with.&lt;/p&gt;

&lt;p&gt;The example given here is small in context, we are only considering a Web app
and a component library. What if you are part of a larger organization, with
dozens of engineers working on several different apps, component libraries and
other smaller libraries that need to be shared across all these apps?&lt;/p&gt;

&lt;h3 id=&quot;a-monorepo-might-be-your-best-choice&quot;&gt;A monorepo might be your best choice&lt;/h3&gt;

&lt;p&gt;What if I told you that there was a way to keep all your apps and libraries
under the same git repository and still keep them isolated from each other,
behaving just like libraries, but with all the benefits of working under the
same repo?&lt;/p&gt;

&lt;p&gt;This is what a &lt;strong&gt;monorepo&lt;/strong&gt; is. A set of tools and practices that allow you to
work under the same repository, but still be able to leverage module isolation
and team autonomy.&lt;/p&gt;

&lt;p&gt;In the JavaScript/TypeScript ecosystem, this is possible due to a native feature
called &lt;a href=&quot;https://pnpm.io/workspaces&quot;&gt;workspaces&lt;/a&gt; which allows us to manage
independent packages nested under a top-level root package. You will see that
applied in practice during this series, but this subtle difference has a huge
difference:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Your team can now work together in the same repo&lt;/strong&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Which means that working across different apps and libraries is just
transparent. No need to clone a different repo, check Node and package
manager version or anything that could drift apart in your tech stack and
standards. With a monorepo, we can guarantee that all apps and libraries are
using the exact same version of every dependency.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Module-level isolation with libraries versioned and published individually&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Given that packages are isolated, you can still work on them individually,
making changes and publishing new versions to npm as you need. For packages
that contain applications that require a deployment step to some cloud
environment, it can be handled in the exact same way libraries are
published, just with a different deployment workflow. You will see that
being applied during this series.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that being said, a monorepo isn’t a
&lt;a href=&quot;http://worrydream.com/refs/Brooks-NoSilverBullet.pdf&quot;&gt;silver bullet&lt;/a&gt;. It does
come with challenges and we will talk about them as we start building our
monorepo example.&lt;/p&gt;

&lt;h2 id=&quot;what-is-next&quot;&gt;What is next&lt;/h2&gt;

&lt;p&gt;In the next article, we will start by creating our monorepo from scratch,
setting up a Web app, a Component library and a Documentation website. All of
them will be fully independent within their own packages and we will be able to
build, test and deploy them independently.&lt;/p&gt;

&lt;p&gt;Stay tuned for the next blogpost.&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">Welcome to the TypeScript monorepo article series. In this series, you will learn about what a monorepo is, why it’s becoming so popular today and how you can build your own production-ready monorepo with a Web application, a documentation website and a component library, all built with TypeScript.</summary></entry><entry><title type="html">Modern Webapps with React, Phoenix, Elixir and TypeScript</title><link href="https://bpaulino.com/entries/modern-webapps-with-elixir-phoenix-typescript-react" rel="alternate" type="text/html" title="Modern Webapps with React, Phoenix, Elixir and TypeScript" /><published>2022-01-19T00:00:00+00:00</published><updated>2022-01-19T00:00:00+00:00</updated><id>https://bpaulino.com/entries/elixir-phoenix-typescript-react</id><content type="html" xml:base="https://bpaulino.com/entries/modern-webapps-with-elixir-phoenix-typescript-react">&lt;p&gt;I’ve started working on a side project this year and the tech stack I have
chosen was the &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir lang&lt;/a&gt; due to its functional
design and fault tolerance (Thanks to the &lt;a href=&quot;https://www.erlang.org/&quot;&gt;Erlang VM&lt;/a&gt;)
so the &lt;a href=&quot;https://www.phoenixframework.org/&quot;&gt;Phoenix framework&lt;/a&gt; was a natural
choice for me.&lt;/p&gt;

&lt;p&gt;While Phoenix provides a very interesting programming model called
&lt;a href=&quot;https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html&quot;&gt;LiveView&lt;/a&gt;, I wanted
to stick with the frontend stack I’m most familiar with which is
&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;. Besides using it heavily in my day job, I also
really appreciate the ecosystem around it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are a savvy Elixir engineer and just want to see the code,
&lt;a href=&quot;https://github.com/brunojppb/React-Phoenix-TS&quot;&gt;here is the Github repo ready for you.&lt;/a&gt;
Feel free to leave a Github star so folks can find this template more easily.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I wanted to come up with a solid Phoenix project where I can get all the
benefits from Elixir and Phoenix itself, but also be flexible enough by not
coupling my React frontend with Phoenix. My requirements were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Be able to use
&lt;a href=&quot;https://webpack.js.org/concepts/hot-module-replacement/&quot;&gt;Hot Module Replacement&lt;/a&gt;
during frontend development.&lt;/li&gt;
  &lt;li&gt;Run the React frontend in a separate process from the Phoenix app&lt;/li&gt;
  &lt;li&gt;During development, changes on the React frontend do not trigger the elixir
compiler&lt;/li&gt;
  &lt;li&gt;During development, changes on the Phoenix app do not trigger frontend
recompilation&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/HTTP/CORS&quot;&gt;CORS&lt;/a&gt;. I don’t want
to think about it. It’s a no-brainer if we bundle all our apps together under
the same domain.&lt;/li&gt;
  &lt;li&gt;In production, serve the React frontend under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/app/*&lt;/code&gt; path from Phoenix&lt;/li&gt;
  &lt;li&gt;In production, all other routes should be server-rendered, so we can still
benefit from serve-side rendering for specific cases like better SEO and
dynamic landing pages with a smart
&lt;a href=&quot;https://developers.cloudflare.com/cache/about/cache-control&quot;&gt;caching strategy via Cloudflare&lt;/a&gt;
using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stale-while-revalidate&lt;/code&gt; headers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the clear requirements defined above, I managed to make them all work by
combining Phoenix and &lt;a href=&quot;https://vitejs.dev/&quot;&gt;Vite&lt;/a&gt;. So let’s get our hands dirty,
write some code and make this project work!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This guide assumes that you are already familiar with Elixir, Phoenix and a
frontend framework like React, so we skip a few basic concepts and jump
straight in. Although, I will be linking some important resources to guide you
in case you are just starting with this stack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;creating-our-phoenix-project&quot;&gt;Creating our Phoenix project&lt;/h2&gt;

&lt;p&gt;First of, make sure you have the following dependencies installed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Elixir: &lt;a href=&quot;https://elixir-lang.org/install.html&quot;&gt;installation guide here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Phoenix:
&lt;a href=&quot;https://hexdocs.pm/phoenix/installation.html&quot;&gt;installation guide here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;NodeJS 16 or above:
&lt;a href=&quot;https://github.com/nvm-sh/nvm#installing-and-updating&quot;&gt;installation guide here using NVM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PostgreSQL: &lt;a href=&quot;https://www.postgresql.org/download/&quot;&gt;Download here&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let’s head to our terminal and create our Phoenix app:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix phx.new phoenix_react
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once your project is react, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into it and fire up the Phoenix server:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;phoenix_react
&lt;span class=&quot;c&quot;&gt;# Make sure the Postgres database is available for Ecto&lt;/span&gt;
mix ecto.create
&lt;span class=&quot;c&quot;&gt;# Start the dev server&lt;/span&gt;
mix phx.server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you should be able to access your Phoenix app at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt; and see a
page like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/phoenix_web_app.png&quot; alt=&quot;Phoenix App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Awesome! We have got our Phoenix app up and running. Let’s bootstrap our React
app in an independent directory.&lt;/p&gt;

&lt;h2 id=&quot;creating-our-react-with-typescript-project&quot;&gt;Creating our React with TypeScript project&lt;/h2&gt;

&lt;p&gt;For our React frontend, I’ve chosen &lt;a href=&quot;https://vitejs.dev/&quot;&gt;Vite&lt;/a&gt; to handle all
the tooling for me. It has got all the sane defaults I need for a TypeScript
project with React, plus it uses &lt;a href=&quot;https://esbuild.github.io/&quot;&gt;ESBuild&lt;/a&gt; which
gives us blazing fast feedback during development.&lt;/p&gt;

&lt;p&gt;To kick things off, leave the Phoenix server running and open up a new terminal
window. Still within the Phoenix directory in your terminal, let’s use the Vite
CLI to create our React project:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm init vite@latest frontend &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--template&lt;/span&gt; react-ts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This should create our React project under the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frontend&lt;/code&gt; directory. Let’s
install all dependencies and start our Vite dev server:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;frontend
npm &lt;span class=&quot;nb&quot;&gt;install
&lt;/span&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now head to your browser at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:3000&lt;/code&gt;, you should see our React app up
and running!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/react_ts_vite_app.png&quot; alt=&quot;React App&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;adding-routes-to-our-react-app&quot;&gt;Adding routes to our React app&lt;/h2&gt;

&lt;p&gt;There is a major difference between Phoenix routes and React routes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Phoenix routes are mapped to a request to the server, which results in a new
template rendering which results in the whole browser to reload.&lt;/li&gt;
  &lt;li&gt;React routes are client-side only, which means that navigating from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/app/settings&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/app/profile&lt;/code&gt; in our React app doesn’t mean a new request
to the server. It might just mount a new component instantly which might not
need server data at all.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the strategy here is to leverage &lt;a href=&quot;https://reactrouter.com/&quot;&gt;React Router&lt;/a&gt; on
our React app for any route that is under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/app&lt;/code&gt; and whenever the client makes
the first request to our app, let’s say they are visiting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example.com/app&lt;/code&gt; for
the first time, Phoenix will handle this initial request and serve the initial
HTML together with our React app payload, so the React app can be mounted and
take care of the routing from there.&lt;/p&gt;

&lt;p&gt;To make sure that client-side route changes are working, let’s add a very basic
routing component so we can test if our react app is working. Let’s start by
installing React Router in our React app. Stop the dev server and execute the
following:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;react-router-dom@6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now open up your favorite text editor and edit our React app file at
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phoenix_react/frontend/src/App.tsx&lt;/code&gt; with the following components:&lt;/p&gt;

&lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react-router-dom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;gap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
   * During development we can still access the base path at `/`
   * And this hook will make sure that we land on the base `/app`
   * path which will mount our App as usual.
   * In production, Phoenix makes sure that the `/app` route is
   * always mounted within the first request.
   * */&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BrowserRouter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/settings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Settings Page&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HomePage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Route&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;settings&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SettingsPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BrowserRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SettingsPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Settings Page&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;My profile&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Music&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HomePage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;8px&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;React TS Home&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Welcome to the homepage&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you should be able to visit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:3000/app&lt;/code&gt; and see a screen similar to
the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/react_router_app.png&quot; alt=&quot;React app with routes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Try to click around the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Home&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings Page&lt;/code&gt; links at the top. Notice that
it transitions between pages instantly. If you check your Phoenix console, you
notice that no requests have been fired to your backend. So far so good.&lt;/p&gt;

&lt;p&gt;Also notice that we now access our React app via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/app&lt;/code&gt; route. This is
important and plays a major role when we bundle our application for production
and serve it from Phoenix. We are using a small hook to check whether our app
was mounted to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; path and redirect to the base path. This is only relevant
for development. In production, Phoenix will make sure that the user is always
in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/app&lt;/code&gt; when using our React app.&lt;/p&gt;

&lt;h2 id=&quot;serving-our-react-frontend-from-phoenix&quot;&gt;Serving our React frontend from Phoenix&lt;/h2&gt;

&lt;p&gt;So far, Phoenix has no clue about our React app. We need to come up with a way
to tell Phoenix how to serve our React app once it’s bundled and ready to be
served as a SPA. For that to work, we can do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Build our React app for production with Vite&lt;/li&gt;
  &lt;li&gt;Copy our production build to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static&lt;/code&gt; folder so we can use
&lt;a href=&quot;https://hexdocs.pm/plug/Plug.Static.html&quot;&gt;Plug.Static&lt;/a&gt; to serve our static
assets&lt;/li&gt;
  &lt;li&gt;Make Phoenix aware about the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/app&lt;/code&gt; route so our generated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; from
Vite can be statically served, which will trigger our React resources to be
loaded.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;creating-a-custom-mix-task-to-do-the-job&quot;&gt;Creating a custom mix task to do the job&lt;/h3&gt;

&lt;p&gt;To manage point 1 and 2 from the previous section, we can create a custom
&lt;a href=&quot;https://hexdocs.pm/mix/1.12/Mix.Task.html&quot;&gt;mix task&lt;/a&gt; that can execute all the
TypeScript bundling via NPM and coping files around to make our React app ready
to be served by Phoenix.&lt;/p&gt;

&lt;p&gt;Our custom mix task will make sure that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All of our frontend dependencies are installed&lt;/li&gt;
  &lt;li&gt;build our frontend for production distribution&lt;/li&gt;
  &lt;li&gt;Move the production files to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static/webapp&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/priv/static/webapp&lt;/code&gt; path will be picked up by Phoenix later on, but make
sure that you add it to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file. We don’t want to commit our
frontend production bundles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s go ahead and create &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/mix/tasks/webapp.ex&lt;/code&gt; with the following Elixir
code:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Webapp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@moduledoc&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;
    React frontend compilation and bundling for production.
  &quot;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Path for the frontend static assets that are being served&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# from our Phoenix router when accessing /app/* for the first time&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@public_path&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./priv/static/webapp&quot;&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@shortdoc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Compile and bundle React frontend for production&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;📦 - Installing NPM packages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;npm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;install&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--quiet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;cd:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;⚙️  - Compiling React frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;npm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;run&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;cd:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;🚛 - Moving dist folder to Phoenix at &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@public_path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# First clean up any stale files from previous builds if any&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-rf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@public_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-R&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./frontend/dist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@public_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;⚛️  - React frontend ready.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the &lt;a href=&quot;https://hexdocs.pm/elixir/1.12/System.html&quot;&gt;System&lt;/a&gt; module, we can
interact directly with our host system, so we can issue shell commands when
invoking our custom mix task.&lt;/p&gt;

&lt;p&gt;Let’s try it out. Stop your Phoenix server and execute the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix webapp

&lt;span class=&quot;c&quot;&gt;# You should see an outout similar to the following:&lt;/span&gt;
15:48:13.605 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info]  📦 - Installing NPM packages
15:48:15.034 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info]  ⚙️  - Compiling React frontend
15:48:19.611 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info]  🚛 - Moving dist folder to ./priv/static/webapp
15:48:19.618 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info]  ⚛️  - React frontend ready.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Our frontend is ready to be served by Phoenix now. But there is one little
change we have to make to our Vite configuration so our Frontend static assets
can be delivered.&lt;/p&gt;

&lt;h2 id=&quot;making-the-webapp-base-path-discoverable&quot;&gt;Making the webapp base path discoverable&lt;/h2&gt;

&lt;p&gt;By default, Phoenix serves static content from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static&lt;/code&gt; directory using
the base route &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;. For instance, if we have a JPG file at
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static/assets/picture.jpg&lt;/code&gt;, Phoenix will make this resource available at
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/assets/picture.jpg&lt;/code&gt; to the public.&lt;/p&gt;

&lt;p&gt;We want that to happen, but for our web app, static resources will be under the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/webapp/&lt;/code&gt; path. Luckily, this is extremely simple.&lt;/p&gt;

&lt;h3 id=&quot;vite-base-path-for-production&quot;&gt;Vite base path for production&lt;/h3&gt;

&lt;p&gt;Since we want to serve our Web app from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static/webapp&lt;/code&gt;, we have to make
sure that during our production build, Vite should append the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/webapp/&lt;/code&gt; base
path to all our resources. This is paramount for our app to work.&lt;/p&gt;

&lt;p&gt;Vite provides a specific configuration entry for that. Let’s go ahead and edit
our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frontend/vite.config.ts&lt;/code&gt; file with the following:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@vitejs/plugin-react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// https://vitejs.dev/config/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// using the `webapp` base path for production builds&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// So we can leverage Phoenix static assets plug to deliver&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// our React app directly from our final Elixir app,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Serving all files from the `priv/static/webapp` folder.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// NOTE: Remember to move the frontend build files to the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// `priv` folder during the application build process in CI&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// @ts-ignore&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/webapp/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now execute our custom mix task again from within our Phoenix project:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mix webapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once this is done, take a look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;priv/static/webapp/index.html&lt;/code&gt; contents.
We should see an HTML similar to the following:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image/svg+xml&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/webapp/assets/favicon.17e50649.svg&quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vite App&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script
      &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;module&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;crossorigin&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/webapp/assets/index.fb986a90.js&quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modulepreload&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/webapp/assets/vendor.6b432119.js&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/webapp/assets/index.458f9883.css&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;root&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that all URLs there have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/webapp/&lt;/code&gt; base path prepended. That is very
neat. Our Frontend is ready to be served by Phoenix.&lt;/p&gt;

&lt;h3 id=&quot;serving-static-assets-via-plug&quot;&gt;Serving static assets via Plug&lt;/h3&gt;

&lt;p&gt;Phoenix is still unaware of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webapp&lt;/code&gt; static folder. We must add that to our
endpoint configuration so our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plug.Static&lt;/code&gt; can serve it. Head to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/phoenix_react_web/endpoint.ex&lt;/code&gt; at line 23. Add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webapp&lt;/code&gt; to the string
list:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Plug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;at:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;from:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:phoenix_react&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;gzip:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;only:&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;~w(assets fonts images webapp favicon.ico robots.txt)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that tiny change, Phoenix is now able to serve the static assets generated
by Vite.&lt;/p&gt;

&lt;h3 id=&quot;serving-the-initial-html-page-via-phoenix&quot;&gt;Serving the initial HTML page via Phoenix&lt;/h3&gt;

&lt;p&gt;We now have a fully functional frontend and our Phoenix backend is able to
deliver its static assets like JavaScript and CSS files. But to make it really
feel native to our platform, we must be able to visit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example.com/app&lt;/code&gt; or any
other route under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/app&lt;/code&gt; and our React app must be able to mount all its
components based on the given route.&lt;/p&gt;

&lt;p&gt;For that to work, we must deliver the initial &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; that was generated by
Vite whenever someone visits &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/app/*&lt;/code&gt;. We need a custom Phoenix controller.
Let’s build that now.&lt;/p&gt;

&lt;p&gt;Create a new controller at
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib/phoenix_react_web/controllers/webapp_controller.ex&lt;/code&gt; with the following
module:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PhoenixReactWeb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;WebappController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PhoenixReactWeb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:controller&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send_resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_react_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Serve the index.html file as-is and let React&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# take care of the rendering and client-side rounting.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Potential improvement: Cache the file contents here&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# in an ETS table so we don't read from the disk for every request.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render_react_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:phoenix_react&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;priv/static/webapp/index.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now have a controller that can serve our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file, but we need to
configure a route that will hit this newly created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; function. Let’s add
the following scope to our Phoenix router:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PhoenixReactWeb&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WebappController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/*path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WebappController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Awesome! Let’s try this out. Make sure that your Vite dev server is stopped and
start your Phoenix server with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mix phx.server&lt;/code&gt; and go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000/app&lt;/code&gt;.
You should see the exact same result that we had when our Vite dev server was
running!&lt;/p&gt;

&lt;p&gt;Try to click through the header links. It should be all client-side routing. The
ultimate test is to type in the url &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000/app/settings&lt;/code&gt;, hit enter and
see what happens.&lt;/p&gt;

&lt;p&gt;Notice that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/app/settings&lt;/code&gt; page will be displayed as we expected. Behind
the scenes, Phoenix kept delivering the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; file and the React Router
made sure that the right components were mounted. Sweet! Our Phoenix and React
apps are ready to roll!&lt;/p&gt;

&lt;h3 id=&quot;api-requests-and-cors&quot;&gt;API requests and CORS&lt;/h3&gt;

&lt;p&gt;If you have been developing frontend apps that talk to an external API, I’m
quite confident that you have faced a bunch of CORS issues. For those that are
not familiar with, whenever you open up an app at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp.com&lt;/code&gt; and that same app
needs to call an API at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapi.com&lt;/code&gt; the browser prevents that by default.&lt;/p&gt;

&lt;p&gt;Actually, the browser will issue an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OPTIONS&lt;/code&gt; request to check if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapi.com&lt;/code&gt;
allows requests coming from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp.com&lt;/code&gt; to be answered. This is a very
interesting security mechanism and I’m glad it’s there. If you want to learn
more about it, &lt;a href=&quot;https://twitter.com/jaffathecake&quot;&gt;Jake Archibald&lt;/a&gt; wrote
&lt;a href=&quot;https://jakearchibald.com/2021/cors/&quot;&gt;an awesome blogpost&lt;/a&gt; about it with all
the information you need to know.&lt;/p&gt;

&lt;h4 id=&quot;skipping-the-whole-cors-trouble&quot;&gt;Skipping the whole CORS trouble&lt;/h4&gt;

&lt;p&gt;Whenever we are developing an app that it’s all hosted under the same domain,
things are way easier and simpler. If our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp.com&lt;/code&gt; makes a request to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp.com/api/users&lt;/code&gt; the browser won’t even think about checking that because
it knows that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp.com&lt;/code&gt; is under the same domain, so it’s pretty sure that you
allow requests to come and go from your own domain.&lt;/p&gt;

&lt;p&gt;During development, we are running our Phoenix app at port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4000&lt;/code&gt; and our React
app at port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3000&lt;/code&gt;, we need to find a way for requests made by our React app to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:3000/api/users&lt;/code&gt; to be captured by some sort of proxy and forwarded to
our Phoenix backend at port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luckily, Vite saves the day again by providing us with the server proxy
configuration. Head over to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frontend/vite.config.ts&lt;/code&gt; and add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt;
entry to your config:&lt;/p&gt;

&lt;div class=&quot;language-ts highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineConfig&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;vite&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@vitejs/plugin-react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// https://vitejs.dev/config/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defineConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Forward all requests made by our React frontend to `localhost:3000/api`&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// to our Phoenix backend running at `localhost:4000`.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This is only necessary during development.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// In production, our Phoenix and React apps are served from the same&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// domain and port, which makes this configuration unecessary.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/api&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;http://localhost:4000&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;secure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// using the `webapp` base path for production builds&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// So we can leverage Phoenix static assets plug to deliver&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// our React app directly from our final Elixir app,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Serving all files from the `priv/static/webapp` folder.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// NOTE: Remember to move the frontend build files to the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// `priv` folder during the application build process in CI&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// @ts-ignore&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/webapp/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From now on, if you are making requests with
&lt;a href=&quot;https://github.com/axios/axios&quot;&gt;axios&lt;/a&gt; for instance, you can safely make a
request in your React component like this:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RequestComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/api/todos&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setTodos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The request to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/api/todos&lt;/code&gt; should be forwarded to your Phoenix backend and as
long as you have a route and a controller to respond to that, API requests will
be served just fine.&lt;/p&gt;

&lt;p&gt;Authentication via http-only Cookies will also just work without any extra setup
since everything is under the same domain. (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; during development and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myapp.com&lt;/code&gt; in production)&lt;/p&gt;

&lt;h2 id=&quot;creating-an-elixir-release&quot;&gt;Creating an Elixir Release&lt;/h2&gt;

&lt;p&gt;We have got everything setup now and the cherry on top is to generate the Elixir
release with our production Phoenix app.&lt;/p&gt;

&lt;p&gt;The major advantage of an Elixir Release is that it creates a single package
including the Erlang VM, Elixir and all of your code and dependencies. The
generated package can be placed into any machine without any preconfigured
dependency. It works similarly like Go binaries that you just download and
execute.&lt;/p&gt;

&lt;p&gt;But before we generate our release, since we are testing the build locally, we
need to change the port configuration since our runtime configuration is binding
to &lt;strong&gt;443&lt;/strong&gt; by default. Let’s quickly change that at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config/runtime.exs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:phoenix_react&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PhoenixReactWeb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Endpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# here use the `port` variable so we can control that with environment variables&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;host:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Enable the web server&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;server:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;http:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;ip:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;port:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;secret_key_base:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret_key_base&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With that out of the way, execute the following commands to generate the
release:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Generate a secret for our Phoenix app&lt;/span&gt;
mix phx.gen.secret
&lt;span class=&quot;c&quot;&gt;# It will output a very long string. Something like this:&lt;/span&gt;
B41pUFgfTJeEUpt+6TwSkbrxlAb9uibgIemaYbm1Oq+XdZ3Q96LcaW9sarbGfMhy

&lt;span class=&quot;c&quot;&gt;# Now export this secret as a environment variable:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SECRET_KEY_BASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;B41pUFgfTJeEUpt+6TwSkbrxlAb9uibgIemaYbm1Oq+XdZ3Q96LcaW9sarbGfMhy

&lt;span class=&quot;c&quot;&gt;# Export the database URL&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Probably very different in production for you.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# I'm just using the local postgreSQL dev instance for this demo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DATABASE_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ecto://postgres:postgres@localhost/phoenix_react_dev

&lt;span class=&quot;c&quot;&gt;# Get production dependencies&lt;/span&gt;
mix deps.get &lt;span class=&quot;nt&quot;&gt;--only&lt;/span&gt; prod

&lt;span class=&quot;c&quot;&gt;# Compile the project for production&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MIX_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;prod mix compile

&lt;span class=&quot;c&quot;&gt;# Generate static assets in case you&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# are using Phoenix default assets pipelines&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# For serve-side rendered pages&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MIX_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;prod mix assets.deploy

&lt;span class=&quot;c&quot;&gt;# Generate our React frontend using&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# our custom mix task&lt;/span&gt;
mix webapp

&lt;span class=&quot;c&quot;&gt;# Genereate the convenience scripts to assist&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Phoenix applicaiton deployments like running ecto migrations&lt;/span&gt;
mix phx.gen.release

&lt;span class=&quot;c&quot;&gt;# Now we are ready to generate the Elixir Release&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MIX_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;prod mix release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We now have our production release ready. Let’s fire it up with the following
command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;PHX_HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;localhost _build/prod/rel/phoenix_react/bin/phoenix_react start

&lt;span class=&quot;c&quot;&gt;# You should an output similar to the following&lt;/span&gt;
19:52:53.813 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Running PhoenixReactWeb.Endpoint with cowboy 2.9.0 at :::4000 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;http&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
19:52:53.814 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] Access PhoenixReactWeb.Endpoint at http://localhost:4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great! Now our Phoenix app is running in production mode. Now head to your
browser and open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000/app&lt;/code&gt;. You should see our React app being
rendered!&lt;/p&gt;

&lt;p&gt;We have finally succeeded with our Phoenix + React + TypeScript setup. It
provides us with a great developer experience while simplifying our production
builds by bundling our Phoenix app together with our React app.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;While that might have been a tiny bit complex to setup, I believe it is still
worth it to keep your SPA decoupled from your backend. Here is a list with a few
bonus point of this setup:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A single repo to work with which simplifies development, specially with a
bigger team&lt;/li&gt;
  &lt;li&gt;Simpler CI/CD pipelines on the same repository&lt;/li&gt;
  &lt;li&gt;Free to swap out Vite in the future in case we decide to go with a different
build tool&lt;/li&gt;
  &lt;li&gt;In the extreme case of changing our backend from Phoenix to something else,
our React frontend is still fully independent and can basically be copy-pasted
into a new setup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I personally believe that the development and deployment of our applications
should be simple and while having React as a dependency does increase complexity
into our app, the trade-off of building web apps with it pays off in my case.
Although, if you have simple CRUD apps, sticking with vanilla Phoenix templates
and LiveView might be more than enough.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can find the repo with all the changes we made on this post
&lt;a href=&quot;https://github.com/brunojppb/React-Phoenix-TS&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">I’ve started working on a side project this year and the tech stack I have chosen was the Elixir lang due to its functional design and fault tolerance (Thanks to the Erlang VM) so the Phoenix framework was a natural choice for me.</summary></entry><entry><title type="html">How to use Redis Cluster for caching</title><link href="https://bpaulino.com/entries/how-to-use-redis-cluster-for-caching" rel="alternate" type="text/html" title="How to use Redis Cluster for caching" /><published>2021-09-01T00:00:00+00:00</published><updated>2021-09-01T00:00:00+00:00</updated><id>https://bpaulino.com/entries/how-to-use-redis-cluster-for-caching</id><content type="html" xml:base="https://bpaulino.com/entries/how-to-use-redis-cluster-for-caching">&lt;p&gt;In this post, we will explore how we can use Redis as a cache layer for our
application and as we explore it further, we will see how a Redis Cluster can
provide us more scalability and reliability.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;TLDR:&lt;/strong&gt; If you are already familiar with Redis and it’s just looking for a
way to spin-up a fully configured Redis Cluster using Docker,
&lt;a href=&quot;https://github.com/brunojppb/redis-cluster-demo&quot;&gt;here is the Github repo.&lt;/a&gt;
Just clone this repo, go to your terminal, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt; and you
should be good to go.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-is-redis&quot;&gt;What is Redis?&lt;/h2&gt;

&lt;p&gt;Redis is a key-value store. In rough terms, it works just like a database, but
it keeps its data in memory, which means that reads and writes are orders of
magnitude faster compared to relational databases like
&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL.&lt;/a&gt; It is important to mention that Redis
does not replace a relational database. It has its own use-cases and we will
explore some of them in this post.&lt;/p&gt;

&lt;p&gt;For more information about Redis, have a look at their website
&lt;a href=&quot;https://redis.io/&quot;&gt;here.&lt;/a&gt; There you find good documentation and how to install
it on your machine. However, we will be building a demo during this post and we
will use an interesting setup using &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; and
&lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker-compose&lt;/a&gt; that will spin up and
configure the entire Redis cluster for you. The only thing you need available is
Docker.&lt;/p&gt;

&lt;h2 id=&quot;using-redis-for-caching&quot;&gt;Using Redis for caching&lt;/h2&gt;

&lt;p&gt;Whenever we need fast access to some sort of data, we need to think about ways
of keeping this data as close to the application layer as possible. If the
amount of data is small enough, It’s generally a good idea to keep this data in
the local memory so we have instant access. But when we talk about web
applications, specially the ones that are stateless and can potentially run in
multiple servers, we can’t guarantee that the data we need will be present as
well as making sure that other servers in your cluster have fast access to this
same data.&lt;/p&gt;

&lt;p&gt;That is where databases are handy. We can write this data to a central place and
other servers can fetch this data whenever they need. The issue with some
databases is that if you really need blazing fast access, some of them won’t be
able to deliver that at bullet speed. Redis is generally the go-to database
whenever you need fast and reliable access to specific bits of data. It also
provides us with ways to set expiration policies on that data so they are
deleted automatically when they expire.&lt;/p&gt;

&lt;p&gt;Redis is usually a good choice for storing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User sessions&lt;/li&gt;
  &lt;li&gt;Authentication tokens&lt;/li&gt;
  &lt;li&gt;Rate-limit counters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Redis is by no means limited to the use-cases above, but they fit well when you
need fast data access, most often on every request coming through your servers.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-point-of-using-a-cluster&quot;&gt;What is the point of using a cluster?&lt;/h2&gt;

&lt;p&gt;It is usually common to start with a single server instance, perhaps connected
to a database server which can take you a long way. But once you need to scale
you application across different countries and sometimes different continents,
it probably means that your application needs to be available 24h a day, 7 days
a week. And robustness and reliability needs to be embedded in your application.&lt;/p&gt;

&lt;p&gt;You need to start to think about what happens when one of your database servers
go down, either because of an issue in the network or because of a faulty
hardware. If you have only a single instance you will be dead in the water. If
you have backups, it’s going to take sometime until you can spin up a new
instance, configure it all up to your standards, restore the backup and put it
back in business.&lt;/p&gt;

&lt;p&gt;If your application is mission critical, you cannot afford to be offline for a
few hours. Some applications cannot even be offline for a few minutes in the
entire year. This is where a Cluster with replicas can save your skin when a
problem like that happens.&lt;/p&gt;

&lt;p&gt;A Redis Cluster makes sure that your data is automatically shared across
multiple Redis instances, which will give you a higher level of reliability and
availability. In case one of those instances experience any kind of failure, the
other nodes can still serve content normally for your application.&lt;/p&gt;

&lt;h2 id=&quot;spinning-up-a-redis-cluster&quot;&gt;Spinning up a Redis cluster&lt;/h2&gt;

&lt;p&gt;I’ve recently migrated a large web application from using a single Redis
instance to a cluster with
&lt;a href=&quot;https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Shards.html&quot;&gt;multiple shards&lt;/a&gt;,
including multiple replicas. While we are using AWS infrastructure that provides
us the entire cluster configuration, I couldn’t simply trust that everything
would work in production. I had to make sure that we could support a Redis
cluster during development, so I’ve created a setup that spawns several Redis
containers and connect with each other automatically to form a cluster.&lt;/p&gt;

&lt;p&gt;To connect to Redis from your application, you will need a library that can
perform that for you (Otherwise you have to reinvent the wheel). While I’ve been
using &lt;a href=&quot;https://github.com/luin/ioredis&quot;&gt;IORedis&lt;/a&gt; for a nodeJS application in
this demo, if you have been using a different language, you will have to look
for different connectors like &lt;a href=&quot;https://lettuce.io/&quot;&gt;Lettuce for Java&lt;/a&gt; or perhaps
&lt;a href=&quot;https://github.com/go-redis/redis&quot;&gt;go-redis for Go&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The entire setup is ready for you in this
&lt;a href=&quot;https://github.com/brunojppb/redis-cluster-demo&quot;&gt;Github repository here&lt;/a&gt;, so
you don’t have to worry about creating anything from scratch. You can clone it
and give it a spin while we will be walking through the files from this repo
along the rest of this blogpost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;creating-a-dockerfile&quot;&gt;Creating a Dockerfile&lt;/h3&gt;

&lt;p&gt;While we will be using the standard Redis image available from Dockerhub to spin
up several Redis containers, we still need a way to connect them. That is where
we will be building a special container that can issue commands to Redis in a
way that it can form a cluster.&lt;/p&gt;

&lt;p&gt;at
&lt;a href=&quot;https://github.com/brunojppb/redis-cluster-demo/blob/main/redis/Dockerfile&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis/Dockerfile&lt;/code&gt;&lt;/a&gt;
we have the following content:&lt;/p&gt;

&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; redis:latest&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./entrypoint.sh /entrypoint.sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod &lt;/span&gt;755 /entrypoint.sh

&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;/entrypoint.sh&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will be using this Dockerfile to build our custom Docker image based on
Redis. The secret sauce here is actually in at
&lt;a href=&quot;https://github.com/brunojppb/redis-cluster-demo/blob/main/redis/entrypoint.sh&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis/entrypoint.sh&lt;/code&gt;&lt;/a&gt;.
Let’s have a look at this script:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Using the redis-cli tool available as default in the Redis base image&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# we need to create the cluster so they can coordinate with each other&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# which key slots they need to hold per shard&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wait a little so we give some time for the Redis containers&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# to spin up and be available on the network&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;5
&lt;span class=&quot;c&quot;&gt;# redis-cli doesn't support hostnames, we must match the&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# container IP addresses from our docker-compose configuration.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# `--cluster-replicas 1` Will make sure that every master&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# node will have its replica node.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt; | redis-cli &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt; create &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  173.18.0.2:6379 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  173.18.0.3:6379 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  173.18.0.4:6379 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  173.18.0.5:6379 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  173.18.0.6:6379 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  173.18.0.7:6379 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--cluster-replicas&lt;/span&gt; 1

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;🚀 Redis cluster ready.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we are using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis-cli&lt;/code&gt; to issue commands. This command is creating a
cluster and pointing to the specific Redis instances that will be reachable when
we start this script. we are using hard-coded IP addresses here that will be
provided by our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; file later on.&lt;/p&gt;

&lt;p&gt;This cluster is composed by 3 shards. Each shard has a master node that is
responsible for all the writes, but also a Replica node that holds a copy of the
data. A Redis Cluster shard can have up to 500 replicas (at least in AWS). A
Replica node has the power to take over and become the Master node if the
current Master becomes unavailable.&lt;/p&gt;

&lt;p&gt;Now notice that inside of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis&lt;/code&gt; folder we also have a file called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.conf&lt;/code&gt;. This file will be copied to each Redis container later on so they
can instruct the Redis instance to work as part of a cluster. Let’s have a look
at its contents:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Custom config file to enable cluster mode
# on all Redis instances started via Docker
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6379&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The cluster file is created and managed by Redis
# We just need to declare it here
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cluster&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;appendonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is not much going on there. The important part is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cluster-enabled yes&lt;/code&gt;
which enables our Redis instance to act as part of the cluster. We now need a
way to spin up several Redis containers and make sure that they talk to each
other. At the root folder of our project we have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;. Let’s
have a look:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis_1_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis_2_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis_3_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis_4_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis_5_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis_6_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# This volume is specific for the demo Express application&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# built in this repo. You probably won't need that on your own setup.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;express_app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;express_app&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4000&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;REDIS_CLUSTER_URLS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis_1:6379,redis_2:6379,redis_3:6379,redis_4:6379,redis_5:6379,redis_6:6379&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/app&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node_modules:/app/node_modules&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;npm&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;run&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;dev&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_3&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_4&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_5&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_6&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cluster_initiator&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;4000:4000&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stdin_open&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redis_cluster_net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;173.18.0.10&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Here we have six Redis containers with Cluster mode enabled,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# three of them will work as master nodes and each one of&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# will have a replica, so in case of failures, the replica becomes the master.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# They are configured by the `cluster_initiator` container.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis_1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_1_data:/data&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./redis/redis.conf:/usr/local/etc/redis/redis.conf&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis-server&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/local/etc/redis/redis.conf&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redis_cluster_net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;173.18.0.2&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;redis_2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_2_data:/data&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./redis/redis.conf:/usr/local/etc/redis/redis.conf&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis-server&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/local/etc/redis/redis.conf&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redis_cluster_net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;173.18.0.3&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;redis_3&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_3&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_3_data:/data&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./redis/redis.conf:/usr/local/etc/redis/redis.conf&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis-server&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/local/etc/redis/redis.conf&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redis_cluster_net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;173.18.0.4&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;redis_4&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_4&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_4_data:/data&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./redis/redis.conf:/usr/local/etc/redis/redis.conf&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis-server&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/local/etc/redis/redis.conf&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redis_cluster_net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;173.18.0.5&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;redis_5&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_5&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_5_data:/data&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./redis/redis.conf:/usr/local/etc/redis/redis.conf&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis-server&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/local/etc/redis/redis.conf&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redis_cluster_net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;173.18.0.6&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;redis_6&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_6&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_6_data:/data&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./redis/redis.conf:/usr/local/etc/redis/redis.conf&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis-server&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/local/etc/redis/redis.conf&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redis_cluster_net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;173.18.0.7&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Ephemeral container to create the Redis cluster connections.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Once the setup is done, this container shuts down&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# and the cluster can be used by the service app container&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;cluster_initiator&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cluster_initiator&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;dockerfile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tty&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_3&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_4&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_5&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_6&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redis_cluster_net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;173.18.0.8&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Web UI to browse through our Redis data across all nodes&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis_commander&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rediscommander/redis-commander:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_web&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;REDIS_HOSTS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;local:redis_1:6379,local:redis_2:6379,local:redis_3:6379&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5000:8081&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_3&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_4&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_5&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis_6&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cluster_initiator&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redis_cluster_net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;ipv4_address&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;173.18.0.9&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Rename the default network so we can easily identify it&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Across all containers&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis_cluster_net&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bridge&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ipam&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;subnet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;173.18.0.0/16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a long one, but here is what this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; does:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Creates a container with our Express application (just for the sake of this
demo)&lt;/li&gt;
  &lt;li&gt;Creates several instances of Redis
    &lt;ul&gt;
      &lt;li&gt;Configure their IP addresses to match the ones used in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoint.sh&lt;/code&gt;
script&lt;/li&gt;
      &lt;li&gt;Copy the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.conf&lt;/code&gt; file so they can act as a cluster&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Creates a cluster initiator container that is only necessary for executing our
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoint.sh&lt;/code&gt; script and make the cluster connection&lt;/li&gt;
  &lt;li&gt;Creates a container with the
&lt;a href=&quot;https://github.com/joeferner/redis-commander&quot;&gt;Redis Commander UI&lt;/a&gt; which is a
nice Web UI for browsing what is stored in our Redis Cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we went through this, let’s try this out. Go to your terminal and
execute:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once everything is ready, you should be able to open your browser and visit
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;. There you have a demo web application I’ve built where you can
enter a key/value pair and save it to Redis and also search for a specific key
you have entered before so it can fetch it from Redis and show you the contents
on the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/redis_cluster_demo_web.png&quot; alt=&quot;Redis Cluster Demo Web App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you are wondering how the connection is setup on the JavaScript side, let’s
have a look at our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/service/redisClient.js&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ioredis&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Get an existing Redis client instance. Build one if necessary
 * @return {Cluster|null} redis client
 * */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buildRedisClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// cluster URLs should be passed in with the following format:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// REDIS_CLUSTER_URLS=10.0.0.1:6379,10.0.0.2:6379,10.0.0.3:6379&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REDIS_CLUSTER_URLS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Cluster&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;redisOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;enableAutoPipelining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Redis Error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Redis emits this error when an something&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// occurs when connecting to a node when using Redis in Cluster mode&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;node error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Redis error in node &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Could not create a Redis cluster client&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buildRedisClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This part is very simple. It reads the cluster URLs from the environment and
creates an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Redis.Cluster&lt;/code&gt; using the RedisIO library. From there on
we can start issue commands like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.set&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.get&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redis.exists&lt;/code&gt;
across our application. Here is how we do that in the demo Express app within
this repo:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buildRedisClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./service/redisClient&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buildRedisClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Have a look at src/index.js for a complete implementation&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/save-data&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;201&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;home/index&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dataSaved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/search&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;home/index&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you would like to explore the data stored in the cluster, go to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:5000&lt;/code&gt; and browse through the Redis Commander UI. There you should be
able see all the Master nodes and explore all keys and values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/redis_commander_ui.png&quot; alt=&quot;Redis Cluster Demo Web App&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will notice that some keys are stored in one Master node and other keys are
stored in other nodes. This is the data distribution done by Redis, which
provides you load balancing across the cluster.&lt;/p&gt;

&lt;p&gt;I hope this Docker setup can help your development workflow the same way it did
for me and my team recently. Feel free to
&lt;a href=&quot;https://twitter.com/bpaulino0&quot;&gt;DM me via Twitter&lt;/a&gt; if you have any questions.&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">In this post, we will explore how we can use Redis as a cache layer for our application and as we explore it further, we will see how a Redis Cluster can provide us more scalability and reliability.</summary></entry><entry><title type="html">Retrying API Calls with Exponential Backoff in JavaScript</title><link href="https://bpaulino.com/entries/retrying-api-calls-with-exponential-backoff" rel="alternate" type="text/html" title="Retrying API Calls with Exponential Backoff in JavaScript" /><published>2021-03-01T00:00:00+00:00</published><updated>2021-03-01T00:00:00+00:00</updated><id>https://bpaulino.com/entries/retrying-api-calls-with-exponential-backoff</id><content type="html" xml:base="https://bpaulino.com/entries/retrying-api-calls-with-exponential-backoff">&lt;p&gt;Have you ever implemented an integration with a third-party service where you
have to call their API endpoints several times a day? Depending on the number of
times you call this API, some of those calls will inevitably fail.&lt;/p&gt;

&lt;p&gt;One solution to mitigate this problem is to implement a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;retry&lt;/code&gt; algorithm. Here
is a sequence diagram showing how this algorithm could look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/api-without-exponential-backoff-diagram.svg&quot; alt=&quot;Exponential backoff diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that once our API call fails, our app immediately tries to call it again.
That could be extremely fast and there is nothing wrong with that, but that
isn’t very effective. Why?&lt;/p&gt;

&lt;h2 id=&quot;being-polite-with-exponential-backoff&quot;&gt;Being polite with Exponential Backoff&lt;/h2&gt;

&lt;p&gt;Lets assume the restaurants API we were trying to call on the diagram above is
having some trouble. Maybe it’s overloaded or is completely down. Retrying to
call it immediately after a failed attempt will do no good. It will actually
make the situation worse: The restaurants API will be hammered harder and won’t
have time to recover.&lt;/p&gt;

&lt;p&gt;To countermeasure that, we can wait a little before retries. We can actually do
better than that. What if on every failed attempt, we exponentially increase the
waiting time for the next attempt? Bingo, This is what
&lt;a href=&quot;https://en.wikipedia.org/wiki/Exponential_backoff&quot;&gt;Exponential Backoff&lt;/a&gt; is.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Our app tries to call the Restaurants API.&lt;/li&gt;
    &lt;li&gt;The API call fails.&lt;/li&gt;
    &lt;li&gt;Our app waits for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;200 millisecods&lt;/code&gt; before calling it again.&lt;/li&gt;
    &lt;li&gt;Our app retries to call the Restaurants API again.&lt;/li&gt;
    &lt;li&gt;The API call fails again.&lt;/li&gt;
    &lt;li&gt;Our app waits for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;400 millisecods&lt;/code&gt; before calling it again.&lt;/li&gt;
    &lt;li&gt;Our app retries to call the Restaurants API again.&lt;/li&gt;
    &lt;li&gt;The API call completes successfully.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is how the diagram would look like when we implement Exponential Backoff:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/api-with-exponential-backoff-diagram.svg&quot; alt=&quot;Exponential backoff diagram&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-can-we-do-that-in-javascript&quot;&gt;How can we do that in Javascript?&lt;/h2&gt;

&lt;p&gt;The implementation of the algorithm above is actually quite straightforward in
Javascript. The implementation below works in Node.js and also in modern
browsers, with zero dependencies.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * Wait for the given milliseconds
 * @param {number} milliseconds The given time to wait
 * @returns {Promise} A fulfilled promise after the given time has passed
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;milliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;milliseconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Execute a promise and retry with exponential backoff
 * based on the maximum retry attempts it can perform
 * @param {Promise} promise promise to be executed
 * @param {function} onRetry callback executed on every retry
 * @param {number} maxRetries The maximum number of retries to be attempted
 * @returns {Promise} The result of the given promise passed in
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onRetry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;maxRetries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Notice that we declare an inner function here&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// so we can encapsulate the retries and don't expose&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// it to the caller. This is also a recursive function&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retryWithBackoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;retries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Make sure we don't wait on the first attempt&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Here is where the magic happens.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// on every retry, we exponentially increase the time to wait.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Here is how it looks for a `maxRetries` = 4&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (2 ** 1) * 100 = 200 ms&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (2 ** 2) * 100 = 400 ms&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (2 ** 3) * 100 = 800 ms&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timeToWait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`waiting for &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timeToWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ms...`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timeToWait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// only retry if we didn't reach the limit&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// otherwise, let the caller handle the error&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;maxRetries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onRetry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retryWithBackoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;retries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Max retries reached. Bubbling the error up&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retryWithBackoff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here is how you can quickly test this implementation:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/** Fake an API Call that fails for the first 3 attempts
 * and resolves on its fourth attempt.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generateFailableAPICall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Simulated error&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*** Testing our Retry with Exponential Backoff */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiCall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generateFailableAPICall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;retry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;apiCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;onRetry called...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to try this out, here is a
&lt;a href=&quot;https://codesandbox.io/s/exponential-backoff-ziy8h?file=/src/index.js&quot;&gt;Codesanbox link&lt;/a&gt;
where you can play with it.&lt;/p&gt;</content><author><name>Bruno</name></author><summary type="html">Have you ever implemented an integration with a third-party service where you have to call their API endpoints several times a day? Depending on the number of times you call this API, some of those calls will inevitably fail.</summary></entry><entry><title type="html">Taming ambiguity</title><link href="https://bpaulino.com/entries/taming-ambiguity" rel="alternate" type="text/html" title="Taming ambiguity" /><published>2021-02-13T00:00:00+00:00</published><updated>2021-02-13T00:00:00+00:00</updated><id>https://bpaulino.com/entries/taming-ambiguity</id><content type="html" xml:base="https://bpaulino.com/entries/taming-ambiguity">&lt;p&gt;The more senior you get at your job, the more comfortable you have to get with
ambiguity.&lt;/p&gt;

&lt;p&gt;We, engineers, have this drive to find binary answers quickly. Is either
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;yes, we can do it&quot;&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;No, that doesn't work&quot;&lt;/code&gt;. But we forget that most of
the time we are not talking to machines, but with people. This is where binary
answers sometimes must be replaced with a spectrum.&lt;/p&gt;

&lt;p&gt;To cope with ambiguity, which is a fundamental part of working with people, you
probably end up saying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;it depends...&quot;&lt;/code&gt; more frequently. While you are
considering several variables on your head before reaching to an answer, this
usually signals that you didn’t frame the problem well enough yet and it doesn’t
make it clear to the other person on what you are considering to find the right
answer.&lt;/p&gt;

&lt;p&gt;One strategy that has been working well for me is to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;it depends&quot;&lt;/code&gt; with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;tell me more...&quot;&lt;/code&gt;. It will implicitly send a more positive message that you
are truly interested in learning more about the topic in order to help, which
will lead to a more clarifying and perhaps engaging conversation.&lt;/p&gt;</content><author><name>Bruno</name></author><summary type="html">The more senior you get at your job, the more comfortable you have to get with ambiguity.</summary></entry><entry><title type="html">Replace me at woombikes.com</title><link href="https://bpaulino.com/hidden/replace-me-at-woom" rel="alternate" type="text/html" title="Replace me at woombikes.com" /><published>2020-12-23T00:00:00+00:00</published><updated>2020-12-23T00:00:00+00:00</updated><id>https://bpaulino.com/hidden/replace-me-at-woom</id><content type="html" xml:base="https://bpaulino.com/hidden/replace-me-at-woom">&lt;p&gt;I joined &lt;a href=&quot;https://woombikes.com/we-are-woom&quot;&gt;woom&lt;/a&gt; in early 2018 and it has been
a challenging, but very rewarding adventure so far. After almost 3 years working
with a wide range of interesting software projects that allowed us to scale
across the globe, I felt it was time for me to take on a new challenge in a
different field. I’m joining the fantastic Web team at
&lt;a href=&quot;https://n26.com/en-at&quot;&gt;N26&lt;/a&gt; as a Tech Lead of their Core segment next year to
help them change banking for the better and that is pretty exciting.&lt;/p&gt;

&lt;p&gt;I’m writing this blogpost to express my gratitude for the amazing woom team and
also to invite you, if you are interested in challenging projects, to replace me
and continue the amazing work we have been doing so far.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This is not a job ad. If you wish to apply, please have a look
at the &lt;a href=&quot;https://woom-gmbh.jobbase.io/&quot;&gt;application page here.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;about-the-company&quot;&gt;About the Company&lt;/h2&gt;

&lt;p&gt;woom is still a young company, but it has been quite successful and growing fast
like a rocket since it was founded by
&lt;a href=&quot;https://www.linkedin.com/in/marcus-ihlenfeld-a13b433/&quot;&gt;Marcus Ihlenfeld&lt;/a&gt; and
&lt;a href=&quot;https://www.linkedin.com/in/bezdeka/&quot;&gt;Christian Bezdeka&lt;/a&gt; in 2013.&lt;/p&gt;

&lt;p&gt;Whenever I get the chance to talk about
&lt;a href=&quot;https://woombikes.com/we-are-woom&quot;&gt;woom&lt;/a&gt;, especially for friends who have kids,
I tell them we make &lt;em&gt;“Lamborghini”&lt;/em&gt; bikes for kids. I’m not talking about luxury
or pricing here, I am talking about an amazing design and quality which makes
our bikes insanely good. Our mission is to see as many children as possible
loving to ride their bikes, and for that to happen, we have to make damn good
bikes. And to be completely honest, we do a pretty awesome job. Our motto is
&lt;strong&gt;“Think like a child, act like a Pro.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our bikes are super light-weight and tailor-made with kids in mind. It isn’t
just an adult bike that was shrunk to fit kids. No, far from that, all the
components are engineered from scratch taking into consideration real-world kids
size, weight and whatnot.&lt;/p&gt;

&lt;p&gt;So if you always wanted to work for a company that has a true positive impact in
future generations, woom is definitely a great place for you to be part of. Our
headquarters is located in
&lt;a href=&quot;https://www.google.com/maps/place/woom+GmbH/@48.2724804,16.3549515,12.68z/data=!4m8!1m2!2m1!1swoom!3m4!1s0x476d0f409d127629:0x83a3bdb8980c31c2!8m2!3d48.2910947!4d16.343956&quot;&gt;Klosterneuburg, directly on the outskirts of Vienna.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-kick-ass-team&quot;&gt;A Kick-ass Team&lt;/h2&gt;

&lt;p&gt;The whole woom team is distributed across Europe, USA and now it’s expanding to
Asia. But talking about the Tech team specifically, we are four developers, two
project managers, a system admin and a team lead working on different projects,
ranging from internal systems that help to expand our business to our e-commerce
platform that delivers our bikes in several countries and continents.&lt;/p&gt;

&lt;p&gt;Besides small projects that help other teams in the company to work with ease,
The developers are working in two high-profile projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Odoo ERP system which powers our warehouse. It’s written in Python and
it’s &lt;a href=&quot;https://github.com/odoo/odoo&quot;&gt;open-source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The e-commerce platform (more about it later on)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are the main projects that need love the most, so you will probably be
helping on both (mostly on the e-commerce side), either by writing highly
scalable code or contributing to technical decisions that have a big impact on
the future of the business.&lt;/p&gt;

&lt;h2 id=&quot;the-job&quot;&gt;The Job&lt;/h2&gt;

&lt;p&gt;I usually describe myself as the &lt;em&gt;Jack-of-all-trades&lt;/em&gt; Software Engineer at woom,
but if you like a cooler term, you can call it a &lt;strong&gt;Full-Stack Software
Engineer&lt;/strong&gt;. Jokes aside, the job is quite broad and requires strong technical
skills on “how the Web works”, attention to detail and focus on making our
customers happy. With that being said, I still believe that this isn’t the most
important thing we need. Most importantly, &lt;strong&gt;you must be good at people&lt;/strong&gt;. We
need someone kind and understanding, that can put themselves in other people’s
shoes and listen to what they have to say. The software you write is meant to
help the people around you, so if you seriously consider the person on the other
side, I’m pretty damn sure you can write good software.&lt;/p&gt;

&lt;p&gt;Your responsibilities would be quite broad, but if I could pin-point them, they
would be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Primarily focused on our e-commerce platform by writing code, caring about
infrastructure (mostly automated with &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;),
monitoring and scalability (More on the tech-stack later).&lt;/li&gt;
  &lt;li&gt;Contribute to technical discussions and decisions, even for things unrelated
to the e-commerce platform. After all, you are a Software Engineer that will
be there to support the team on solving challenging problems.&lt;/li&gt;
  &lt;li&gt;Define and document internal processes. An example could be &lt;strong&gt;“How to deploy
our e-commerce infrastructure in a new country”&lt;/strong&gt; including all the technical
steps necessary to tackle a new market like accepting multi-currency payments,
localization and so on.&lt;/li&gt;
  &lt;li&gt;Nice to have:
    &lt;ul&gt;
      &lt;li&gt;Interested in project management, agile and topics related to that.&lt;/li&gt;
      &lt;li&gt;Experience with CI and CD. (We use &lt;a href=&quot;https://gitlab.com&quot;&gt;Gitlab&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-tech-stack&quot;&gt;The Tech Stack&lt;/h2&gt;

&lt;p&gt;Since your primary focus would be on our e-commerce platform, you are probably
interested in its ins and outs. Here is a breakdown of the tech we use at woom:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript and TypeScript are our languages of choice.&lt;/li&gt;
  &lt;li&gt;MongoDB is our database through
&lt;a href=&quot;https://www.mongodb.com/cloud/atlas&quot;&gt;MongoDB Atlas.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our frontend is written with &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js&lt;/a&gt; (an isomorphic
framework based on &lt;a href=&quot;https://vuejs.org/&quot;&gt;Vue.js.&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;We use several SaaS platforms that are vital for scalability and growth. Here
the most important ones you will be dealing with on a daily basis:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.shopify.com/&quot;&gt;Shopify&lt;/a&gt; as our headless GraphQL e-commerce
platform.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://kontent.ai/&quot;&gt;Kentico Kontent&lt;/a&gt; as our multi-language/multi-country
CMS platform.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;All those services are brought together via a
&lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL API&lt;/a&gt; using
&lt;a href=&quot;https://www.apollographql.com/docs/federation/&quot;&gt;Apollo Federation.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt; is our cloud provider. We also use
&lt;a href=&quot;https://www.hetzner.com/?country=en&quot;&gt;Hetzner&lt;/a&gt; for some other web
applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;If you made it this far and you feel like working with this amazing team, give
it a shot. Even If you don’t check all the boxes for this role, but if you feel
strongly and motivated to work in a fun and friendly company, I would still
encourage you to apply. Our lovely HR team will be happy to review your
application. Finally and above all, we value diversity, so we would love to see
folks from underrepresented groups
&lt;a href=&quot;https://woom-gmbh.jobbase.io/&quot;&gt;applying for this position.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you have any particular question, don’t hesitate to
&lt;a href=&quot;https://twitter.com/bpaulino0&quot;&gt;reach out to me via twitter.&lt;/a&gt; My DMs are open.&lt;/p&gt;</content><author><name>Bruno</name></author><summary type="html">I joined woom in early 2018 and it has been a challenging, but very rewarding adventure so far. After almost 3 years working with a wide range of interesting software projects that allowed us to scale across the globe, I felt it was time for me to take on a new challenge in a different field. I’m joining the fantastic Web team at N26 as a Tech Lead of their Core segment next year to help them change banking for the better and that is pretty exciting.</summary></entry><entry><title type="html">How to Create Bulletproof Tickets</title><link href="https://bpaulino.com/entries/how-to-create-bulletproof-tickets" rel="alternate" type="text/html" title="How to Create Bulletproof Tickets" /><published>2020-12-08T00:00:00+00:00</published><updated>2020-12-08T00:00:00+00:00</updated><id>https://bpaulino.com/entries/how-to-create-bulletproof-tickets</id><content type="html" xml:base="https://bpaulino.com/entries/how-to-create-bulletproof-tickets">&lt;p&gt;It’s Monday morning, you just had your first coffee in front of the computer and
you open your project management app to start planning your week with your team.
You start reading your backlog of tasks and then you see a ticket with the
title:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[BUG] Button doesn’t respond&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You open the ticket and for your astonishment, the description is empty, there
are no screenshots, no urls, &lt;em&gt;nada&lt;/em&gt;. You can only see that this ticket was
created by Joe. You immediately start to think &lt;em&gt;“Ho dear Joe, what did you see?
on which page did you see this button? Which button specifically doesn’t
respond? Was it happening constantly, was it intermittent, was it you who found
this issue? Can you reproduce?”&lt;/em&gt; So many questions you want to ask Joe, but so
little time.&lt;/p&gt;

&lt;p&gt;If you have never had a similar situation like I mentioned before while working
on a project with multiple people, you can consider yourself the luckiest person
on the planet. The truth is, you have to put a good deal of thought and time
into creating a great ticket. Reporting a bug or defining a requirement well is
a kind of art.&lt;/p&gt;

&lt;p&gt;Whenever you are in a position of reporting something in written form, in this
case creating a ticket, you have to put yourself in the shoes of the other
person that will read and work on it.&lt;/p&gt;

&lt;h2 id=&quot;why-is-creating-good-tickets-so-important&quot;&gt;Why is creating good tickets so important?&lt;/h2&gt;

&lt;p&gt;At first sight, it seems like a time consuming task, and to be completely
honest, it does take time to create a good ticket. But what we often miss is the
time we save by avoiding roundtrips of questions that could have been answered
during the ticket creation in the first place. Here are some reasons why
creating a meaningful ticket is important:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;It saves time:&lt;/strong&gt; People don’t have to run around to gather the information
that is already there.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;More understanding:&lt;/strong&gt; A well written ticket helps to give more understanding
about the problem that might be hard to track down.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Solid solutions:&lt;/strong&gt; The more you understand the problem, the better and more
reliable the solution will be. And the understanding usually starts by reading
the ticket.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Less frustration:&lt;/strong&gt; Once the context is well detailed and understood, the
people that will work on the problem will have less ambiguous questions to ask
which will reduce the cognitive load while reasoning about a solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might be thinking &lt;em&gt;“Okay Bruno, but how the heck do I know whether a ticket
is good or not?”&lt;/em&gt;. I’m Glad you asked and this is a super valid question by the
way. After dealing with hundreds of tickets along the years, I have got an
interesting method that I want to share with you in the next section.&lt;/p&gt;

&lt;h2 id=&quot;the-method&quot;&gt;The Method&lt;/h2&gt;

&lt;p&gt;There is zero scientific evidence to back me up here, but what I noticed was
that I could use some small principles to have a well defined method to create
good tickets. So based on what we have seen up until this point, here are the
steps we can take to create good tickets:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Set the stage&lt;/strong&gt;: Explain the context and the impact the problem has.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;How to reproduce&lt;/strong&gt;: If the ticket is related to a bug, here you provide
detailed information on how to recreate the problem in a consistent way.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Offer Solutions&lt;/strong&gt;: If you are able to, offer potential solutions for the
problem you just found.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the following sections, I will construct a fictional ticket (but based on
real world examples of web projects) so you can have a decent example on how you
could apply those steps.&lt;/p&gt;

&lt;h2 id=&quot;set-the-stage&quot;&gt;Set the stage&lt;/h2&gt;

&lt;p&gt;Let’s imagine you have just found a bug on the website from the company you work
with. Now you need to report the problem and hopefully someone will fix it as
quickly as possible. How do you start explaining the problem to someone that you
might not even know?&lt;/p&gt;

&lt;p&gt;To start things off, you need to give as much information as possible about the
context of the bug. And what do I mean by context? Here the important thing is
to explain in detail what you expect in a normal case and what the bug
introduces. But don’t be too verbose on it otherwise you leave a lot of room for
ambiguity. Here is an example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;With the introduction of the new product versions, we changed the URLs our
customers see on our public website. This causes several problems with
external tools that rely on the previous URLs (e.g. Marketing Campaigns).&lt;/p&gt;

  &lt;p&gt;The basic premises of existing product URLs are:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;The customer must have a stable URL for any published product&lt;/li&gt;
    &lt;li&gt;It should never change for the same product in the eyes of the customer&lt;/li&gt;
    &lt;li&gt;With an immutable URL none of our marketing campaigns running on our Ad
platforms would stop working.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the example above, we have given a good overview of the problem and also a
good reason for the problem to be solved. This is a good starting point for a
discussion about the ticket and also helps to prioritize it during planning.&lt;/p&gt;

&lt;h2 id=&quot;how-to-reproduce&quot;&gt;How to Reproduce&lt;/h2&gt;

&lt;p&gt;Now that we have set up a good context by explaining the problem in detail and
why it is important to fix it, it’s time to write down the steps to reproduce
it. In software development, debugging can be a challenging task and the more
clues you have, the easier it gets to find and fix the problem. One part of the
puzzle is to consistently reproduce the problem in a safe environment so it can
be monitored, tracked down and fixed. For that to happen, you usually have to
define a set of steps that lead to the problem you found. Here is an example
following our fictional problem above:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To reproduce the problem, please follow the steps below:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Open an existing product in the admin interface&lt;/li&gt;
    &lt;li&gt;Open the product preview and write down the current URL&lt;/li&gt;
    &lt;li&gt;Go back to the admin interface and update the product reference for a new
version of the same product&lt;/li&gt;
    &lt;li&gt;save the changes&lt;/li&gt;
    &lt;li&gt;Open the product preview again on the website&lt;/li&gt;
    &lt;li&gt;Compare the new URL with the previous URL you saved&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The comparison will result in an URL mismatch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the clear steps mentioned above, anyone who gets assigned to work on this
ticket will quickly manage to verify the problem and test it as many times as
they need.&lt;/p&gt;

&lt;p&gt;Sometimes you won’t be able to have a consistent way of reproducing the problem
and that is fine too, but try to find as many reproducible steps as possible.
This will save a good chunk of time for the development team which leads to a
faster bug-fix being deployed.&lt;/p&gt;

&lt;h2 id=&quot;offer-solutions&quot;&gt;Offer Solutions&lt;/h2&gt;

&lt;p&gt;The cherry on top, if you have more understanding of the systems you are
reporting the bug, is to offer potential solutions for the problem you just
found. Developers like challenges, but nobody has infinite time and at the end
of the day, we have to produce value for the business, so the quicker a problem
can be solved, the better.&lt;/p&gt;

&lt;p&gt;in some cases, you might even know exactly what the problem is and how to fix
it, so don’t spare words into giving a more detailed and technical suggestion at
this stage. Here is how I would suggest a solution for our fictional URL problem
we have been creating:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It looks like this problem happens at the e-commerce platform level. Since
this is a third-party application which we don’t have access to the source
code, we have to fix this problem on another layer of our system.&lt;/p&gt;

  &lt;p&gt;A potential solution could be to set rules on our reverse proxy so we keep
accepting requests from old URLs and map them to the new ones. In the
meantime, I will also report this problem to our e-commerce provider.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is clear that in the example above, the author has a deeper understanding of
what is happening in the internal systems and that is a big advantage. But if
you don’t have this level of insight, you can still provide good feedback on how
to solve the problem. Any potential solution should be considered, especially if
that is coming from someone that understands the problem.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;I have been following those principles for a long time and it actually became
quite natural for me while creating a ticket, but I understand that it takes
time to build up this understanding.&lt;/p&gt;

&lt;p&gt;Sometimes your ticket will still leave room for questions and clarifications,
and that is fine too. As long as your ticket was well prepared, even those
follow-up questions will be more meaningful and complete, leading to less
frustration and a more fluid communication path with your team.&lt;/p&gt;

&lt;p&gt;I believe by now you have the superpowers to create bulletproof tickets 🦸🏼‍♀️. Here
is the complete ticket we created during this blogpost:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Subject&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;Product URL breaks after updating product version reference.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;With the introduction of the new Product versions, we changed the URLs our
customers see on our public website. This causes several problems with
external tools that rely on the previous URLs (e.g. Marketing Campaigns).&lt;/p&gt;

  &lt;p&gt;The basic premises of existing product URLs are:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;The customer must have a stable URL for any published product&lt;/li&gt;
    &lt;li&gt;It should never change for the same product in the eyes of the customer&lt;/li&gt;
    &lt;li&gt;With an immutable URL, none of our marketing campaigns running on our Ad
platforms would stop working.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;strong&gt;How to Reproduce&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;To reproduce the problem, please follow the steps below:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Open an existing product in the admin interface&lt;/li&gt;
    &lt;li&gt;Open the product preview and write down the current URL&lt;/li&gt;
    &lt;li&gt;Go back to the admin interface and update the product reference for a new
model&lt;/li&gt;
    &lt;li&gt;Save the changes&lt;/li&gt;
    &lt;li&gt;Open the product preview on the website&lt;/li&gt;
    &lt;li&gt;Compare the new URL with the previous URL you saved&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The comparison will result in an URL mismatch.&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;Potential Solution&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;It looks like this problem happens at the e-commerce platform level. Since
this is a third-party application which we don’t have access to the source
code, we have to fix this problem on another layer of our system.&lt;/p&gt;

  &lt;p&gt;A potential solution could be to set rules on our reverse proxy so we keep
accepting requests from old URLs and map them to the new ones. In the
meantime, I will also report this problem to our e-commerce provider.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">It’s Monday morning, you just had your first coffee in front of the computer and you open your project management app to start planning your week with your team. You start reading your backlog of tasks and then you see a ticket with the title:</summary></entry><entry><title type="html">DevOps and its impact on Developer Productivity</title><link href="https://bpaulino.com/entries/devops-and-its-impact-on-developer-productivity" rel="alternate" type="text/html" title="DevOps and its impact on Developer Productivity" /><published>2020-11-22T00:00:00+00:00</published><updated>2020-11-22T00:00:00+00:00</updated><id>https://bpaulino.com/entries/devops-and-its-impact-in-developer-productivity</id><content type="html" xml:base="https://bpaulino.com/entries/devops-and-its-impact-on-developer-productivity">&lt;p&gt;I have recently finished reading
&lt;a href=&quot;https://www.goodreads.com/book/show/35747076&quot;&gt;Accelerate: building and Scaling High Performing Technology Organizations&lt;/a&gt;
to get a more in-depth view into the DevOps landscape and its influence in
developer productivity. The book is based on solid research conducted by
&lt;a href=&quot;https://twitter.com/nicolefv&quot;&gt;Dr. Nicole Forsgren&lt;/a&gt;,
&lt;a href=&quot;https://twitter.com/jezhumble&quot;&gt;Jez Humble&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/RealGeneKim&quot;&gt;Gene Kim.&lt;/a&gt; The book is an eye-opener for the
importance of software delivery performance and the value it brings to any
organization that takes it seriously.&lt;/p&gt;

&lt;p&gt;This book made me reflect on my experience with DevOps, my own productivity and
the productivity of my team. I don’t want to quote every topic mentioned in the
book here, but I absolutely recommend you to give it a read. My focus is
actually to explore how it relates to my journey adopting DevOps along my career
and the benefits it brings.&lt;/p&gt;

&lt;h2 id=&quot;shipping-code-to-production-and-developer-confidence&quot;&gt;Shipping code to production and developer confidence&lt;/h2&gt;

&lt;p&gt;When I started my career, I worked at a company where the deployment process was
done by a magician developer that held all the powers. Nobody was allowed to
deploy code unless this wizard could cast his spells. The second problem we had
was that all engineers knew how to run the application on their local machines
but once the rubber hits the road, nobody had a clue about setting up
dependencies and building the application for production.&lt;/p&gt;

&lt;p&gt;That was a terrible workflow to work with and once during a lucky day, I had no
choice but to perform a production deployment by myself. I was feeling scared
just thinking about what could go wrong. Having this deployment workflow was a
huge blow on the confidence of the engineers in my team, including myself, where
not only nobody wanted to be responsible for it, but also not a single person
wanted to get involved with it.&lt;/p&gt;

&lt;p&gt;Over the years, I started to learn about DevOps and incrementally adopted it
wherever I go so I could avoid the bad experience I had in the past. Since then,
I have been reaping the benefits of it over and over again. The productivity
gain was immense.&lt;/p&gt;

&lt;h2 id=&quot;starting-with-continuous-integration&quot;&gt;Starting with Continuous Integration&lt;/h2&gt;

&lt;p&gt;To start things off, you want to make your deployment process as predictable and
as reproducible as possible. Which means that you have to make sure the work
done by a developer can be built, tested and deployed to a safe environment,
only then it can be shipped to production. This is called Continuous Integration
(CI). Once you define and validate your integration steps for your application
stack, be it Java, Node.js or even mobile apps, you must reproduce those steps
in code using version control, better yet if you can make this a part of your
application repository. As an example, those steps could look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Code is committed by an engineer in a feature branch&lt;/li&gt;
  &lt;li&gt;A build of the application is triggered. This build is technically
production-grade, which means that it has minimal or no difference between
development and production, mainly configuration differences (e.g. a sandbox
payment gateway where fake payments can be issued), preferably configured via
environment variables&lt;/li&gt;
  &lt;li&gt;A suite of automated tests will be executed on this build&lt;/li&gt;
  &lt;li&gt;Once all tests pass, the code can be reviewed and merged to the production
branch (commonly known as main)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The steps above can be performed by any developer in the team. Once you have a
continuous integration pipeline in place, the engineers don’t even have to think
about it much since they can be triggered automatically by a continuous
integration service like &lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github Actions&lt;/a&gt;
or &lt;a href=&quot;https://docs.gitlab.com/ee/ci/&quot;&gt;Gitlab CI.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have this process in place, you will have robustness built-in on your
development workflow, which will inevitably lead to more confidence with your
code, ultimately leading to more productivity.&lt;/p&gt;

&lt;h2 id=&quot;nail-it-down-with-continuous-deployment&quot;&gt;Nail it down with Continuous Deployment&lt;/h2&gt;

&lt;p&gt;What if I told you that once code is reviewed and merged to your production
branch, this code could be automatically released to production with minimal or
no impact to your users? Yes, that is possible. This is called Continuous
Deployment (CD). The same thought process applied to continuous integration can
be transferred to your deployment workflow, where automated pipelines will make
sure your code is pushed to your servers clusters.&lt;/p&gt;

&lt;p&gt;Here you can apply the same constraints as before: You want to make sure that
every deployment is predictable and reproducible. Any failed steps should leave
traces (logs, error messages/code) for further inspection and debug. Here is an
example on how it could work for a backend application deployed in a multi-node
architecture.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Code is merged into the production branch (Build and tests were previously
executed, so the confidence level here is already very high)&lt;/li&gt;
  &lt;li&gt;Traffic is diverted to specific nodes in your cluster, inactive nodes are
updated with the new version of your build. This step is done incrementally
for every node, which will result in a
&lt;a href=&quot;https://spring.io/blog/2016/05/31/zero-downtime-deployment-with-a-database&quot;&gt;zero downtime deployment (or blue/green deployment)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Notification is sent to your team about the newly deployed version. Could be
as simple as an email or more sophisticated integrations with your internal
chat of choice. (e.g. &lt;a href=&quot;https://slack.com/intl/en-at/&quot;&gt;Slack&lt;/a&gt;,
&lt;a href=&quot;https://mattermost.com&quot;&gt;Matterost&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once again, all the steps mentioned above can be executed automatically, with
zero manual intervention. Of course, you won’t probably have the full confidence
to do it right away, which is totally understandable. But you can start with
small steps by automating the process in code and triggering them manually in
the beginning. Once the confidence is high enough, this step can be performed
automatically for every new code merged.&lt;/p&gt;

&lt;p&gt;Once you enable anyone in your team to perform a deployment with confidence, the
productivity of your peers will be noticeably better. As a result, you will be
delivering value to your customers much faster, most probably much faster than
other companies that don’t adopt such practices, which will give an edge on the
competition.&lt;/p&gt;

&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to go from here&lt;/h2&gt;

&lt;p&gt;If you are reading about CI and CD for the first time, fear not, you can
absolutely do this and adopt such practices. Start with very small actions, I
like to call it “start with baby steps”. Do you build and test your application
manually? Start by automating the build steps in a simple script. Have no
automated test suite? Start adding automated tests to critical paths on your
app. Those steps will slowly build robustness and resilience into your codebase.&lt;/p&gt;

&lt;p&gt;Once you are confident enough with your first scripts, make it executable from a
remote service like Github Actions. That is a good start to enable your team to
execute the same steps without being concerned with having the right machine or
dependency installed.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;DevOps is a very broad topic and we have only covered a very shallow surface
here, so there is much more to learn and explore. If you are an engineer and you
let the “Ops team handle it”, I ask you to look at it differently. You don’t
have to become a DevOps specialist, but if you manage to include DevOps on your
tool belt, you and your team will be much better off.&lt;/p&gt;

&lt;p&gt;There is also a very interesting chapter in the book where specific actions can
be taken by managers so software delivery is treated as a “first-class citizen”
across your organization. Some actions that I find very interesting and I have
personally seen it working:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use failure as a learning opportunity to improve&lt;/li&gt;
  &lt;li&gt;Create budgets for continuous learning and training&lt;/li&gt;
  &lt;li&gt;Space to explore new ideas and share it with others&lt;/li&gt;
  &lt;li&gt;Let your team use their tool of choice (in other words, don’t force them to
write Java if they are high-skilled and productive with JavaScript)&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">I have recently finished reading Accelerate: building and Scaling High Performing Technology Organizations to get a more in-depth view into the DevOps landscape and its influence in developer productivity. The book is based on solid research conducted by Dr. Nicole Forsgren, Jez Humble and Gene Kim. The book is an eye-opener for the importance of software delivery performance and the value it brings to any organization that takes it seriously.</summary></entry><entry><title type="html">Using custom React hooks to handle components external events</title><link href="https://bpaulino.com/entries/using-custom-react-hooks-to-handle-components-external-events" rel="alternate" type="text/html" title="Using custom React hooks to handle components external events" /><published>2020-09-20T00:00:00+00:00</published><updated>2020-09-20T00:00:00+00:00</updated><id>https://bpaulino.com/entries/using-custom-react-hooks-to-handle-components-external-events</id><content type="html" xml:base="https://bpaulino.com/entries/using-custom-react-hooks-to-handle-components-external-events">&lt;p&gt;On a side project this weekend, I had the classic case for a modal
implementation. In most of the applications you have to deal with daily, you
come to a place where you have to confirm some action or review some changes
before pushing the &lt;em&gt;“I am 100% sure about this”&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;This is the perfect case for a modal, a small view that partially covers the
screen and presents you with a few options. Most of the time, there will be a
button to close the modal away by clicking on the “close” button on the
top-right corner. But an even better way to let the user dismiss the modal is to
let them click outside of the view in focus, without forcing them to hit the
often too small &lt;strong&gt;“x”&lt;/strong&gt; on top.&lt;/p&gt;

&lt;p&gt;Here is the live implementation of our modal component we will build during this
post. Try it out on our
&lt;a href=&quot;https://codesandbox.io/s/small-browser-vosod?file=/src/Modal.js&quot;&gt;Codesandbox&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&quot;https://codesandbox.io/embed/react-custom-hooks-see0d?fontsize=14&amp;amp;hidenavigation=1&amp;amp;theme=dark&amp;amp;view=preview&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;react-custom-hooks&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;For cases like this, you most probably want to watch for clicks or taps outside
the main view, in this case, the modal, so you can take the correct action of
closing it. But how could you do that in &lt;a href=&quot;https://reactjs.org/&quot;&gt;React?&lt;/a&gt; one way
would be to implement a global click handler in the component, something like
this:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modalRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modalRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modalRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Here you can close your modal.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// how to close it, that is up to you&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (e.g. removing components, changing routes)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// in this case, I am calling a `onClose` function&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// passed down as a prop.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Click happened outside. you can close now.&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;onClose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Pointer events are more device agnostic&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// which are able to handle clicks on Desktops and Taps on mobile devices&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// See: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerdown_event&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pointerdown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Once our component unmount or update, we must remove the event listener&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pointerdown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Use the modalRef as dependency for the useEffect hook&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// so whenever this reference changes, the listener will update&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modalRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modalRef&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-modal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal-header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Super important Action&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal-body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        This is an important message. read it carefully.
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal-footer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Ok&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But this implementation leaves a lot of room for duplication isn’t? If we need
to handle a similar case on a different component, we will be doomed to repeat
the same click away logic. We can do better than that by leveraging the power of
custom React hooks.&lt;/p&gt;

&lt;h2 id=&quot;sharing-logic-with-custom-react-hooks&quot;&gt;Sharing logic with Custom React hooks&lt;/h2&gt;

&lt;p&gt;In my opinion, hooks are one of the most beautiful features in React. You can
compose your components in such a way that gives your application superpowers.
React itself leverages the power of hooks with
&lt;a href=&quot;https://reactjs.org/docs/hooks-state.html&quot;&gt;useState&lt;/a&gt;,
&lt;a href=&quot;https://reactjs.org/docs/hooks-effect.html&quot;&gt;useEffect&lt;/a&gt; and a bunch of others.&lt;/p&gt;

&lt;p&gt;But we are not limited to the hooks React offers, we can create our own hooks,
enabling us to share logic in a very functional way across our app. Lets extract
that click away logic from our previous modal component into a custom hook:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useRef&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useClickAway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClickAway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Keep a mutable reference to click away callback&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// and change it every time the component using it changes&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// using 'useRef' here will make sure that we have a mutable&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// and single callback lying around.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callbackRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClickAway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;callbackRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClickAway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClickAway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// listen for click events on ref element&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// attaching a handler and calling the callback if necessary&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPointerDown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;callbackRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pointerdown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPointerDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pointerdown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onPointerDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;lets break our custom hook down.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;We start by declaring a plain javascript function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useClickAway&lt;/code&gt;. This
function takes two arguments. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref&lt;/code&gt; which is a mutable reference to the
component we want to watch for clicks “outside” of its boundaries. And a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClickAway&lt;/code&gt; callback, which will be executed once we detect a click outside.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We created a ref for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useClickAway&lt;/code&gt; callback using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useRef&lt;/code&gt; hook. This
will make sure that we have only one reference to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useClickAway&lt;/code&gt; callback
that is captured by our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEffect&lt;/code&gt; calls we will use later.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On our first useEffect call, we make sure to keep track of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useClickAway&lt;/code&gt;
reference. So in case our component updates the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useClickAway&lt;/code&gt; reference, we
also have to update our internal reference inside our custom hook.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On our second useEffect call, this where rubber hits the road. If you pay
close attention, this call is exactly the same as we implemented in our modal
component. The only difference is that we are calling our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callbackRef&lt;/code&gt;
reference for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onClickAway&lt;/code&gt; function instead. This is an extra layer of
check to make sure that we are calling the right reference of the callback
once a click happens outside of the view.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that in place, how can we use that in our modal component? Lets see how the
code looks like now:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useRef&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useClickAway&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./useClickAway&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Modal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;modalRef&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;useClickAway&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modalRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;onClose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shadow-overlay&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;modalRef&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-modal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal-header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Super important Action&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal-body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          This is an important message. read it carefully.
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modal-footer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onClose&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Ok&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can you notice how clean our modal component looks now? Better yet, we can reuse
that same logic across our app just by reusing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useClickAway&lt;/code&gt; hook. Isn’t
that cool?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Disclaimer: This simple modal we created here is highly inaccessible. You
should not use that modal sample code in production.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/react-custom-hooks-see0d&quot;&gt;Here is the link&lt;/a&gt; to the
Codesandbox demo we built on this blogpost. Feel free to copy and use it on your
apps.&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">On a side project this weekend, I had the classic case for a modal implementation. In most of the applications you have to deal with daily, you come to a place where you have to confirm some action or review some changes before pushing the “I am 100% sure about this” button.</summary></entry><entry><title type="html">Fine tuning self-hosted Gitlab server to solve SSH scaling problems</title><link href="https://bpaulino.com/entries/allowing-more-connections-on-self-hosted-gitlab" rel="alternate" type="text/html" title="Fine tuning self-hosted Gitlab server to solve SSH scaling problems" /><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><id>https://bpaulino.com/entries/allowing-more-connections-to-gitlab</id><content type="html" xml:base="https://bpaulino.com/entries/allowing-more-connections-on-self-hosted-gitlab">&lt;p&gt;At my current job, we have a self-hosted &lt;a href=&quot;https://gitlab.com/&quot;&gt;Giltab&lt;/a&gt; instance
to control our codebases and run automation jobs. If you don’t know what Gitlab
is, you probably know &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; which is a platform to work
in collaboration with software teams using &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; for
version control.&lt;/p&gt;

&lt;p&gt;We recently onboarded a new partner to support us with our
&lt;a href=&quot;https://github.com/odoo/odoo&quot;&gt;ERP system&lt;/a&gt;. We are working together to improve
our current deployment pipeline and make it more resilient and robust. We use
&lt;a href=&quot;https://docs.gitlab.com/ee/ci/&quot;&gt;Gitlab CI&lt;/a&gt; to automate our workflows and make
our codebase more reliable.&lt;/p&gt;

&lt;p&gt;After setting up &lt;a href=&quot;https://docs.gitlab.com/runner/&quot;&gt;more runners&lt;/a&gt;, we noticed
something strange happening randomly and quite frequently during our CI builds.
While fetching more repositories, some builds were failing with the following
message:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;fatal: Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Humm, that seems strange. Our runners have the correct access rights to the
repositories. Also, this error was happening randomly for different repositories
that was clearly working during other exact same builds.&lt;/p&gt;

&lt;p&gt;With this information at hand, we started off the debugging journey. We started
monitoring the system and checking the server logs. Everything seemed normal.
There was nothing draining our resources to the point where our server would
start dropping connections.&lt;/p&gt;

&lt;h2 id=&quot;ssh-load-balancing-and-maxstartups&quot;&gt;SSH Load Balancing and MaxStartups&lt;/h2&gt;

&lt;p&gt;Discussing the issue among my smart teammates, we couldn’t see a reason for
Gitlab itself to be dropping connections with the amount of workload. There
could be some configuration with our &lt;a href=&quot;https://www.openssh.com/&quot;&gt;OpenSSH&lt;/a&gt;
defaults that might be responsible for that. And we indeed found one.&lt;/p&gt;

&lt;p&gt;OpenSSH has this neat setting called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxStartups&lt;/code&gt; which is composed by 3 values
separated by columns represented as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start:rate:full&lt;/code&gt;. They mean:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start&lt;/code&gt;: The max number of unauthenticated connections&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rate&lt;/code&gt;: The percentage of connections that will be dropped once our total of
unauthenticated connections reaches the number specified at &lt;strong&gt;start&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;full&lt;/code&gt;: By the time the queue of pending connections reaches the number
specified at &lt;strong&gt;full&lt;/strong&gt;, all connections will be dropped.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt;, the SSH configuration file, you will see:&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;MaxStartups&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This configuration means: starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt; pending to authenticate
connections, our server will start dropping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;30%&lt;/code&gt; of new connection attempts.
Once our queue of pending connections reaches &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;100&lt;/code&gt;, all new connections will be
dropped with no mercy.&lt;/p&gt;

&lt;p&gt;After understanding how MaxStartups works, we looked again at our runners and we
noticed that some jobs were fetching 10 different repositories in parallel
during the build and aggregating them to build a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Docker_(software)&quot;&gt;Docker image&lt;/a&gt;. We were
really playing the dice when running those builds 😅.&lt;/p&gt;

&lt;p&gt;With that in mind, we tweaked MaxStartups with the following values:&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;MaxStartups&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that, just restart our SSH daemon with:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart ssh.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We could see that the MaxStartups change instantly fixed the issue. Our builds
were flying again with zero connection drops. The new settings allowed us
greater leeway to connect to our server simultaneously, reducing the risk of
dropped connections.&lt;/p&gt;

&lt;h2 id=&quot;defaults-can-only-take-you-so-far&quot;&gt;Defaults can only take you so far&lt;/h2&gt;

&lt;p&gt;The default settings were more than enough for us to start using
&lt;a href=&quot;https://docs.gitlab.com/omnibus/&quot;&gt;Gitlab with its Omnibus package&lt;/a&gt;. I didn’t
even know about those SSH settings to begin with, but once you start hitting
scaling problems, there is usually a escape hatch that can help you to leverage
the same resources to a much greater usage scenario.&lt;/p&gt;

&lt;p&gt;Only after fixing the issue that I found Gitlab themselves had the exact same
issue.
&lt;a href=&quot;https://about.gitlab.com/blog/2019/08/27/tyranny-of-the-clock/&quot;&gt;They wrote a great blog post about it.&lt;/a&gt;&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">At my current job, we have a self-hosted Giltab instance to control our codebases and run automation jobs. If you don’t know what Gitlab is, you probably know Github which is a platform to work in collaboration with software teams using Git for version control.</summary></entry><entry><title type="html">Hardening your server security with Fail2Ban</title><link href="https://bpaulino.com/entries/hardening-your-server-security-with-fail2ban" rel="alternate" type="text/html" title="Hardening your server security with Fail2Ban" /><published>2020-07-01T00:00:00+00:00</published><updated>2020-07-01T00:00:00+00:00</updated><id>https://bpaulino.com/entries/hardening-your-server-security-with-fail2ban</id><content type="html" xml:base="https://bpaulino.com/entries/hardening-your-server-security-with-fail2ban">&lt;p&gt;I was recently checking the access logs from some linux servers I maintain and I
was very surprised by the ssh login attempts those servers were facing. My
servers have password access disabled by default, so only previously registered
ssh keys are allowed to login. But even then, the amount of login attempts was
disturbing. Around 500 attempts a day. I had to do something about it.&lt;/p&gt;

&lt;p&gt;Talking to my coworkers about it, one of them suggested a tool called
&lt;a href=&quot;https://www.fail2ban.org/wiki/index.php/Main_Page&quot;&gt;Fail2Ban&lt;/a&gt;. It runs a
background service that monitors the log files on your server and based on
suspicious activities, like unsuccessful login attempts, it blocks access from
those bad actors by updating firewall rules to reject any connection for their
IP addresses.&lt;/p&gt;

&lt;p&gt;My first thought was &lt;em&gt;“I should be careful because I could ban myself and lose
access to my server permanently”&lt;/em&gt;. So I started the installation process very
carefully. Fortunately, the default configuration only blocks the IP access for
10 minutes, so worst case I would have a few minutes to have coffee. I also
started the process in a “trash-able” server, so if something goes wrong, I
could just throw it away and start anew.&lt;/p&gt;

&lt;p&gt;We will customize those settings for a more robust strategy later on here on
this post.&lt;/p&gt;

&lt;h2 id=&quot;installing-fail2ban&quot;&gt;Installing Fail2Ban&lt;/h2&gt;

&lt;p&gt;Let’s get started. The first step is to install Fail2Ban on your server
(Ubuntu):&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Update dependencies&lt;/span&gt;
apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt upgrade &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# install fail2ban&lt;/span&gt;
apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fail2Ban comes with a pretty solid default configuration, but since our goal is
to customize it to our needs, they recommend us to copy the default
configuration file with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.local&lt;/code&gt; extension. The reason for this is that if
we update Fail2Ban, the original configuration file will get changed and we will
lose our custom configuration.&lt;/p&gt;

&lt;h2 id=&quot;put-those-bad-actors-in-jail&quot;&gt;Put those bad actors in jail&lt;/h2&gt;

&lt;p&gt;The configuration files are located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/fail2ban&lt;/code&gt;, so lets go ahead and
create a local copy of those files:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Copy fail2ban default configuration&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local
&lt;span class=&quot;c&quot;&gt;# Copy fail2ban jail configuration&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fail2Ban uses the concept of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jails&lt;/code&gt; to monitor specific services like nginx,
ssh, apache and even your custom application logs like Node.js or Java apps.
Each jail specifies a configuration for a specific application or service
running on your server. By default, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshd&lt;/code&gt; jail is active.&lt;/p&gt;

&lt;h2 id=&quot;avoid-banning-specific-ip-addresses&quot;&gt;Avoid banning specific IP Addresses&lt;/h2&gt;

&lt;p&gt;To prevent specific IP addresses of being banned, you can create an allow-list
in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fail2ban.local&lt;/code&gt; file. Go ahead and edit the following line with your IP
Addresses using space (and/or comma) as a separator:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# allow IP addresses from your VPN or other servers here&lt;/span&gt;
ignoreip &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 127.0.0.1/8 ::1 YOU_IP_ADDRESS_HERE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;activating-fail2ban&quot;&gt;Activating Fail2Ban&lt;/h2&gt;

&lt;p&gt;Now that we have Fail2Ban installed and pre-configured by default, lets start
the service:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As soon as you start Fail2Ban, you might already see some bad actors blocked.
First lets check which jails are active with the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fail2ban-client status
&lt;span class=&quot;c&quot;&gt;# You should see something like this as output:&lt;/span&gt;
Status
|- Number of jail:	1
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- Jail list: sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ok, so we have Fail2Ban up and running, lets check the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshd&lt;/code&gt; jail with the
following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fail2ban-client status sshd
&lt;span class=&quot;c&quot;&gt;# You should see something like this as output&lt;/span&gt;
Status &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the jail: sshd
|- Filter
|  |- Currently failed:	10
|  |- Total failed:	511
|  &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- File list:	/var/log/auth.log
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- Actions
   |- Currently banned:	9
   |- Total banned:	77
   &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- Banned IP list:	218.255.86.106 222.186.31.83 85.209.48.228 180.166.184.66 218.92.0.220 109.255.185.65 150.158.178.137 111.231.132.94 66.70.130.149
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my case, I could immediately see the benefit of Fail2Ban. after a few
minutes, I had already several IP addresses banned.&lt;/p&gt;

&lt;p&gt;Lets lookup our IP table to see if those IP addresses match with the following
command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You should see something like this as output&lt;/span&gt;
Chain f2b-sshd &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 references&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
target     prot opt &lt;span class=&quot;nb&quot;&gt;source               &lt;/span&gt;destination
REJECT     all  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  103.100.211.72       0.0.0.0/0            reject-with icmp-port-unreachable
REJECT     all  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  66.70.130.149        0.0.0.0/0            reject-with icmp-port-unreachable
REJECT     all  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  111.231.132.94       0.0.0.0/0            reject-with icmp-port-unreachable
REJECT     all  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  150.158.178.137      0.0.0.0/0            reject-with icmp-port-unreachable
REJECT     all  &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  109.255.185.65       0.0.0.0/0            reject-with icmp-port-unreachable
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is great. Fail2Ban is updating our IP filter rules which will prevent
connections from those bad actors.&lt;/p&gt;

&lt;h2 id=&quot;changing-the-defaults&quot;&gt;Changing the defaults&lt;/h2&gt;

&lt;p&gt;The default configuration blocks those IP addresses for 600 seconds (10
minutes). This is a pretty good start, but we can do better. Ideally, if some of
those IP addresses are attempting to connect every 10 minutes, we could block
them for a greater timespan or even permanently.&lt;/p&gt;

&lt;p&gt;One thing to consider is that if we block IPs permanently, we can potentially
increase our IP table lookup time, which means that connecting to our server can
become very slow since this list of blocked IPs can grow indefinitely.&lt;/p&gt;

&lt;p&gt;To help us with that, Fail2Ban comes with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recidive&lt;/code&gt; which is a jail for its own
logs. It works like that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It looks into Fail2Ban own logs for banned IP addresses from other jails.&lt;/li&gt;
  &lt;li&gt;If those IP addresses are found in the logs more than 5 times in the current
day, it blocks them for 1 week.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That sounds like a good strategy. Our IP table won’t grow very large (in theory)
because in 1 week it will rollback and allow those IP addresses to connect
again. If they act in bad faith again, they will be blocked and the cycle
repeats.&lt;/p&gt;

&lt;p&gt;So let’s go ahead and activate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recidive&lt;/code&gt;. Edit the file
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/fail2ban/jail.local&lt;/code&gt; (I am using nano, but feel free to use a different
text editor). Look for the following code:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Jail for more extended banning of persistent abusers
# !!! WARNINGS !!!
# 1. Make sure that your loglevel specified in fail2ban.conf/.local
#    is not at DEBUG level -- which might then cause fail2ban to fall into
#    an infinite loop constantly feeding itself with non-informative lines
# 2. Increase dbpurgeage defined in fail2ban.conf to e.g. 648000 (7.5 days)
#    to maintain entries for failed logins for sufficient amount of time
&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;recidive&lt;/span&gt;]

&lt;span class=&quot;n&quot;&gt;logpath&lt;/span&gt;  = /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;fail2ban&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;banaction&lt;/span&gt; = %(&lt;span class=&quot;n&quot;&gt;banaction_allports&lt;/span&gt;)&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bantime&lt;/span&gt;  = &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;findtime&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that the configuration is already in place. We only need to activate it:&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ... comments
&lt;/span&gt;[&lt;span class=&quot;n&quot;&gt;recidive&lt;/span&gt;]
&lt;span class=&quot;c&quot;&gt;# Include the next line to enable recidive
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;logpath&lt;/span&gt;  = /&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;fail2ban&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;banaction&lt;/span&gt; = %(&lt;span class=&quot;n&quot;&gt;banaction_allports&lt;/span&gt;)&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;bantime&lt;/span&gt;  = &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;findtime&lt;/span&gt; = &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we only need to restart the Fail2Ban service with:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart fail2ban
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s check our &lt;strong&gt;fail2ban&lt;/strong&gt; status to see which jails are running after our
update:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fail2ban-client status
&lt;span class=&quot;c&quot;&gt;# You should see something like this as output&lt;/span&gt;
Status
|- Number of jail:	2
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- Jail list:	recidive, sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;recidive&lt;/code&gt; is active, you can check if some IP addresses were banned
for the whole week:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fail2ban-client status recidive
&lt;span class=&quot;c&quot;&gt;# You should see something like this as output&lt;/span&gt;
Status &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the jail: recidive
|- Filter
|  |- Currently failed:	25
|  |- Total failed:	90
|  &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- File list:	/var/log/fail2ban.log
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- Actions
   |- Currently banned:	10
   |- Total banned:	10
   &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- Banned IP list:	129.226.114.97 103.246.240.26 142.93.60.53 167.172.163.162 109.255.185.65 150.158.178.137 66.70.130.149 180.166.184.66 64.225.35.135 218.255.86.106
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we have Fail2Ban monitoring our SSH access and fully configured.&lt;/p&gt;

&lt;h2 id=&quot;what-to-do-if-i-block-myself&quot;&gt;What to do if I block myself&lt;/h2&gt;

&lt;p&gt;You should be very careful with your server access from now on. Make sure that
you have access from your computer and I highly recommend
&lt;a href=&quot;https://www.cyberciti.biz/faq/how-to-disable-ssh-password-login-on-linux/&quot;&gt;disabling password access&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can wait the default 10 minutes or you can access from a different IP
address (like routing your mobile phone) and remove your IP address from the
blocklist with the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fail2ban-client &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;jailname unbanip &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;IP_ADDRESS_HERE]
&lt;span class=&quot;c&quot;&gt;# Here is how it could look like&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# if you want to unban an IP address from the sshd jail&lt;/span&gt;
fail2ban-client &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;sshd unbanip 1.1.1.1
&lt;span class=&quot;c&quot;&gt;# from the recidive jail&lt;/span&gt;
fail2ban-client &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;recidive unbanip 1.1.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to go from here&lt;/h2&gt;

&lt;p&gt;Fail2Ban is quite extensive and supports many different kinds of extensions like
your own custom jails. The good thing is that amazing people around the world
like to share their experience as well, so if you want to setup Fail2Ban for a
different service like nginx,
&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-protect-an-nginx-server-with-fail2ban-on-ubuntu-14-04&quot;&gt;Digital Ocean has a great tutorial about it&lt;/a&gt;
with a step-by-step guide.&lt;/p&gt;

&lt;p&gt;You can also read more about it on the
&lt;a href=&quot;https://www.fail2ban.org/wiki/index.php/Main_Page&quot;&gt;Fail2Ban official page&lt;/a&gt;&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">I was recently checking the access logs from some linux servers I maintain and I was very surprised by the ssh login attempts those servers were facing. My servers have password access disabled by default, so only previously registered ssh keys are allowed to login. But even then, the amount of login attempts was disturbing. Around 500 attempts a day. I had to do something about it.</summary></entry><entry><title type="html">Dockerizing React Apps</title><link href="https://bpaulino.com/entries/12-dockerizing-react-apps" rel="alternate" type="text/html" title="Dockerizing React Apps" /><published>2020-03-02T00:00:00+00:00</published><updated>2020-03-02T00:00:00+00:00</updated><id>https://bpaulino.com/entries/dockerizing-react-apps</id><content type="html" xml:base="https://bpaulino.com/entries/12-dockerizing-react-apps">&lt;p&gt;While creating ReactJS apps, you probably don’t have to think too much about how
to deploy them. ReactJS applications can be easily bundled in a folder,
consisting of plain HTML, CSS and Javascript files. That should be simple enough
to upload it to a S3 Bucket, host it on
&lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; or even integrating great services
like &lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; or &lt;a href=&quot;https://zeit.co/&quot;&gt;Zeit&lt;/a&gt; for fast
and automated deployments.&lt;/p&gt;

&lt;p&gt;But this week, I had the task of deploying a React app created with
&lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt; on a VPS under
a subdomain. I didn’t want to use stone-age FTP, I wanted to have an automated
docker container with my app where I could deploy anywhere without much
configuration.&lt;/p&gt;

&lt;p&gt;I created a demo app with all the configurations detailed on this post. The
&lt;a href=&quot;https://github.com/brunojppb/dockerized-react-app&quot;&gt;code is available here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;preparing-our-dockerfile&quot;&gt;Preparing our Dockerfile&lt;/h2&gt;

&lt;p&gt;We start out by creating a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; on our project root folder with the
following content:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This image won't be shipped with our final container&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# we only use it to compile our app.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:12.2.0-alpine as build&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; PATH /app/node_modules/.bin:$PATH&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; . /app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm run build

&lt;span class=&quot;c&quot;&gt;# production image using nginx and including our&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# compiled app only. This is called multi-stage builds&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; nginx:1.16.0-alpine&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=build /app/build /usr/share/nginx/html&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; /etc/nginx/conf.d/default.conf
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; nginx/nginx.conf /etc/nginx/conf.d&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 80&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;CMD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the snippet of code above, we are using a feature called
&lt;a href=&quot;https://docs.docker.com/develop/develop-images/multistage-build/&quot;&gt;multi-stage builds&lt;/a&gt;.
It requires Docker 17.05 or higher, but the benefit of this feature is enormous,
which I will explain next. On the first half of the script, we are building a
Docker image based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node:12.2.0-alpine&lt;/code&gt; which is a very tiny linux image with
node included. Now notice the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as build&lt;/code&gt; at the end of the first line. This
creates an intermediary image with our dependencies that can be thrown away
after build. Soon after that, we install all the dependencies from my React app
with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install&lt;/code&gt; and later we execute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; to compile the React app
optimized for production.&lt;/p&gt;

&lt;p&gt;On the second half of the code, we create a new Docker image based on
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx:1.16.0-alpine&lt;/code&gt; which is also a tiny linux including
&lt;a href=&quot;https://www.nginx.com/&quot;&gt;nginx&lt;/a&gt;, a high performance web server to serve our
React app. We use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COPY&lt;/code&gt; to extract the content from our previous
image called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build&lt;/code&gt; and copy it into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/nginx/html&lt;/code&gt;. Next, we remove
the default nginx configuration file and add our custom configuration under
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx/nginx.conf&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# To support react-router, we must configure nginx&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# to route the user to the index.html file for all initial requests&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# e.g. landing on /users/1 should render index.html&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# then React takes care of mounting the correct routes&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.htm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;try_files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/index.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;error_page&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;502&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;503&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;504&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;/50x.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/50x.html&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;/usr/share/nginx/html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This configuration is very important for apps using
&lt;a href=&quot;https://reacttraining.com/react-router/web/guides/quick-start&quot;&gt;React Router&lt;/a&gt;.
Whenever you share a link to your React app, lets say, a link to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/users/1/profile&lt;/code&gt;, this link tells the browser to request this path from the
web server. If the web server is not configured properly, our React app won’t be
able to render the initial &lt;strong&gt;index.html&lt;/strong&gt; file containing our React
application.&lt;br /&gt;
Using our custom configuration, we tell nginx to route all requests to the root
folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/nginx/html&lt;/code&gt; which is the directory we previously copied our
React app during image build. We should not forget that React apps are Single
Page Applications, which means that there is only one page to be rendered on the
first request, the rest of the job is taken care by React on the browser.&lt;/p&gt;

&lt;h2 id=&quot;building-our-docker-image&quot;&gt;Building our Docker Image&lt;/h2&gt;

&lt;p&gt;We already have all the required code to build our Docker image. Lets execute
the Docker command to build it:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Make sure to be on the same folder of your React app&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# replace 'my-react-app' with whatever name you find appropriate&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# this is the image tag you will push to your Docker registry&lt;/span&gt;
docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; my-react-app &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the image is built, lets check the size of the image we just generated with
the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# List all the images on your machine&lt;/span&gt;
docker images
&lt;span class=&quot;c&quot;&gt;# You should see something like this:&lt;/span&gt;
REPOSITORY     TAG       IMAGE ID        CREATED          SIZE
my-react-app   latest    c35c322d4c37    20 seconds ago   22.5MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alright, our Docker image is ready to go on to a Docker Registry somewhere. One
interesting thing about this image is that the size is only 22.5MB. This is
really great for deployment because small images make automated pipelines run
much faster during download, image building and upload.&lt;/p&gt;

&lt;h2 id=&quot;running-our-react-app-with-docker-compose&quot;&gt;Running our React app with docker-compose&lt;/h2&gt;

&lt;p&gt;What we need now is a way to run this Docker image. For testing it locally, lets
create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.7&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;my_react_app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8000:80&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker Compose&lt;/a&gt; will take care of building
the image in case it doesn’t exist and also bind the port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8000&lt;/code&gt; from our local
machine to the port &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt; on the container. Now open your browser on
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:8000&lt;/code&gt; and check if our React app is running there. You should see
something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/react_js_app_docker.png&quot; alt=&quot;React JS App running on Docker&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Running a React app with Docker might not be the best deployment, but if you
need to run docker like in my case, it can be very simple and effective. This
opens the door for a lot of automation pipelines you can hook up on the project
like &lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github Actions&lt;/a&gt; or
&lt;a href=&quot;https://docs.gitlab.com/ee/ci/&quot;&gt;Gitlab CI/CD&lt;/a&gt; to automate your deployment
process. You can find
&lt;a href=&quot;https://github.com/brunojppb/dockerized-react-app&quot;&gt;the code of this post here.&lt;/a&gt;&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">While creating ReactJS apps, you probably don’t have to think too much about how to deploy them. ReactJS applications can be easily bundled in a folder, consisting of plain HTML, CSS and Javascript files. That should be simple enough to upload it to a S3 Bucket, host it on Github Pages or even integrating great services like Netlify or Zeit for fast and automated deployments.</summary></entry><entry><title type="html">Rapid Prototyping with GatsbyJS</title><link href="https://bpaulino.com/entries/11-rapid-prototyping-with-gatsby-js" rel="alternate" type="text/html" title="Rapid Prototyping with GatsbyJS" /><published>2020-02-26T00:00:00+00:00</published><updated>2020-02-26T00:00:00+00:00</updated><id>https://bpaulino.com/entries/rapid-prototyping-with-gatsby-js</id><content type="html" xml:base="https://bpaulino.com/entries/11-rapid-prototyping-with-gatsby-js">&lt;p&gt;On February 17th, I
&lt;a href=&quot;https://www.meetup.com/ReactVienna/events/268478297/&quot;&gt;gave a talk at the React Vienna Meetup&lt;/a&gt;
about this topic and I thought writing a blogpost about could benefit some folks
that either couldn’t make it or are living somewhere else around the globe. You
can find my slides &lt;a href=&quot;https://bpaulino.com/rapid-prototyping-gatsby-js/&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would like to start off with a question. What if you want to put together a
website with the most modern web tech out there? You probably need to know a
bunch of things to start a simple website. Do you want to use modern Javascript
syntax? no problem, just use &lt;a href=&quot;https://webpack.js.org/&quot;&gt;Webpack&lt;/a&gt; and
&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; to help you transpile your code. Do you want to put
your website online? just configure an small box on Digital Ocean, add Nginx and
your website is online. Do you want to write blogposts and publish them using a
CMS? No problem, just implement your backend, maybe using Postgres as a
database. This list goes on and on if you try to start with a modern tool chain.&lt;/p&gt;

&lt;p&gt;To get this whole setup done, and most importantly, correctly configured, can be
hard. It is even worse if you are a beginner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/stackoverflow_hard_time.jpg&quot; alt=&quot;A beginner having a hard time on Stackoveflow&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;static-site-generators-come-to-the-rescue&quot;&gt;Static site generators come to the rescue&lt;/h2&gt;

&lt;p&gt;So you realize that this is an enormous amount of tools (and knowledge) you need
to know upfront to start with a simple website. That is really overwhelming.
This is where static site generators really shine. There is usually minimal to
none configuration you have to do, there are many templates you can use to start
with and most of the configuration thing is done for you. Some cool static site
generators are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll (Ruby)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo (Javascript)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuejs.org/&quot;&gt;NuxtJS (Vue.js)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;GatsbyJS (ReactJS)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most interesting one that caught my attention lately was
&lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;GatsbyJS.&lt;/a&gt; I have been working with React for the
past 3 years and finding a decent static site generator based on React was very
interesting. Right from the start, it solves all the problems I mentioned
before. You don’t have to configure anything to start. You only need the minimal
tools installed like a &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;good text editor&lt;/a&gt; and
&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;node.js&lt;/a&gt;. There is also no need to have a server for
hosting. It generates all the pages statically, which means that when you bundle
your website, you have one HTML file for each page of your website, just like
the web is supposed to work. And simple enough, you can just upload those files
to a static site hosting provider like &lt;a href=&quot;https://www.netlify.com/&quot;&gt;netlify&lt;/a&gt; or
even use &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; to host it for free.&lt;/p&gt;

&lt;p&gt;Gatsby has an incredible feature that sets it apart from other generators: Your
datasource doesn’t have to be statically located within the code, like markdown
files. It can be pulled from a remote datasource, like a headless CMS, before
generating the pages.&lt;br /&gt;
That is a big deal if you want the freedom of publishing blogposts from a nice
CMS or you have a team of content creators that are simultaneously creating
content. Their don’t have to be developers to be able to create a blog post, and
Gatsby enables exactly that.&lt;/p&gt;

&lt;h2 id=&quot;our-little-experiment&quot;&gt;Our little experiment&lt;/h2&gt;

&lt;p&gt;At &lt;a href=&quot;https://woombikes.com/&quot;&gt;woom&lt;/a&gt; we are modernizing our tech stack. One
interesting project we had was to rebuild our blog frontend, but in a way that
we don’t get stuck at a specific platform like we had before (using our ERP). As
the main engineer responsible for this project, I decided to give Gatsby a try.
I was impressed with the development speed we had using it to implement our blog
prototype. We ended up using &lt;a href=&quot;https://www.hubspot.com/&quot;&gt;Hubspot&lt;/a&gt; as our CMS
since we are using it for other marketing purposes, but the frontend is still
portable if we decide to shift to a new CMS.
&lt;a href=&quot;https://blog.woombikes.com&quot;&gt;You can take a look at our blog here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how it looks like after we got it done:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/woom_blog_prototype.png&quot; alt=&quot;woom blog using GatsbyJS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But what are the main advantages of Gatsby anyway? What really made us to look
at it differently?&lt;/p&gt;

&lt;h3 id=&quot;it-uses-react&quot;&gt;It uses React&lt;/h3&gt;

&lt;p&gt;If you never heard of &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt; before, it is the
state-of-the-art of frontend libraries. Writing frontend with React requires a
different approach, but it definitely pays off. It lets you break your
application into reusable components, which makes it infinitely simpler to
reason about it and debug.&lt;/p&gt;

&lt;h3 id=&quot;react-hooks&quot;&gt;React hooks&lt;/h3&gt;

&lt;p&gt;Even though Gatsby generates static pages, you can still benefit from React
state management. hooks like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useState&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useContext&lt;/code&gt; are still there to help
us have a more dynamic page.&lt;/p&gt;

&lt;h3 id=&quot;graphql-included&quot;&gt;GraphQL included&lt;/h3&gt;

&lt;p&gt;Using the built-in GraphQL API, you can pull data from a remote datasource,
process static files from your local repository, like lets say images and
transform them to alternative resolutions for different device sizes and so on.&lt;/p&gt;

&lt;h3 id=&quot;development-and-production-configuration-out-of-the-box&quot;&gt;Development and Production configuration out-of-the-box&lt;/h3&gt;

&lt;p&gt;You don’t have to hassle around WebPack configurations, pipelines or anything
like this. The basics, which is already what you need to start, is already
there, properly configured and ready to row with the single command
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn develop&lt;/code&gt; during development and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn build&lt;/code&gt; to deploy a new build.&lt;/p&gt;

&lt;h3 id=&quot;rich-plugin-ecosystem&quot;&gt;Rich plugin ecosystem&lt;/h3&gt;

&lt;p&gt;When looking for a framework, you usually have to consider how flexible it can
be, so you can benefit from the community, using code extensions and plugins.
Gatsby has a very rich plugin ecosystem, and the most important ones, like
&lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-image/&quot;&gt;gatsby-image&lt;/a&gt; for image
processing are already there, provided and maintained by Gatsby directly, which
is a good sign that will be kept up2date.&lt;/p&gt;

&lt;h2 id=&quot;lets-try-to-build-something&quot;&gt;Lets try to build something&lt;/h2&gt;

&lt;p&gt;For this &lt;del&gt;talk&lt;/del&gt; blogpost, I created a little demo. This is a website with a
blog section. The blogposts come from
&lt;a href=&quot;https://www.storyblok.com/&quot;&gt;the headless CMS Storyblok.&lt;/a&gt;. You can find the
source code of
&lt;a href=&quot;https://github.com/brunojppb/gatsby-minimal-blog&quot;&gt;this demo here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/gatsby_minimal_website.png&quot; alt=&quot;Gatsby minimal website with Blog component&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clone the &lt;a href=&quot;https://github.com/brunojppb/gatsby-minimal-blog&quot;&gt;demo repo&lt;/a&gt; and
execute the following commands:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Clone the repo&lt;/span&gt;
git clone git@github.com:brunojppb/gatsby-minimal-blog.git
&lt;span class=&quot;c&quot;&gt;# Now lets go to our newly created project&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;gatsby-minimal-blog
&lt;span class=&quot;c&quot;&gt;# install all dependencies&lt;/span&gt;
yarn &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and fire up the dev server&lt;/span&gt;
yarn develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now lets go to our browser and type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:8000&lt;/code&gt; to see what happens. You
will see a nice and bare-minimum website, very similar to the screenshot I
posted above, but with a link to the blog section of the website.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/gatsby_minimal_website_home.png&quot; alt=&quot;Gatsby Minimal website home page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you take a look at the terminal, you will see that there was an error with a
plugin. something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failed createPages - 0.193s&lt;/code&gt;. This is because when we
hit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yarn develop&lt;/code&gt; Gatsby kicks in and try to fetch our posts from Storyblok.
But since you don’t have an account there yet, it can’t find out your API token
to access your blogposts. So go ahead and open
&lt;a href=&quot;https://app.storyblok.com/#!/&quot;&gt;Storyblok&lt;/a&gt; to create your account and select the
demo.&lt;br /&gt;
After signing in, you will that there is a &lt;strong&gt;demo space&lt;/strong&gt; created for you. Don’t
get bogged down with the details, Lets just try to create content there. On the
left-hand side, click on &lt;strong&gt;Content&lt;/strong&gt;, inside content, you will see a list of
different assets. You have to delete all of them, but leave &lt;strong&gt;Blog Articles&lt;/strong&gt;.
Now select &lt;strong&gt;Blog Articles&lt;/strong&gt;.&lt;br /&gt;
You will see a list of different contents, select all of them and delete it. We
will create a new article from scratch. On the top-right corner, select
&lt;strong&gt;“+Entry”&lt;/strong&gt;. You will be asked to enter a title. On the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;content type&lt;/code&gt; dialog,
select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;article&lt;/code&gt; and hit create. After this screen, you will land on a CMS-like
page where you can write on the right-hand side menu and see it live rendering
on the left-hand side. Try it out, update the title field and write something
into the &lt;strong&gt;long text&lt;/strong&gt; dialog. When you are happy with it, just hit &lt;strong&gt;publish&lt;/strong&gt;
on the top-right corner.&lt;/p&gt;

&lt;p&gt;Now lets get the API Key to access our content. To to settings -&amp;gt; API-Keys.
There you have an API token called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;. copy it to your clipboard. Now head
back to your text editor and create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.env.development&lt;/code&gt; on your
project root folder. and inside of it, add your API token in the following
pattern:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-env&quot;&gt;CMS_API_TOKEN=YOUR_API_TOKEN_HERE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, restart your development server. Go to your browser and click on
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Visit our blog section&lt;/code&gt;. You should see your recently created article there.
You can click on it and to directly to the article page. But what happened
there? Lets take a look at the a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gatsby-node.js&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;marked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;marked&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createPages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`https://api.storyblok.com/v1/cdn/stories`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CMS_API_TOKEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;space.version&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Create articles list page&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;createPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/articles&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./src/templates/all_articles.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// create each individual article page&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;createPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`/article/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;./src/templates/article.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Don't do this at home :)&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// You need to sanitize this HTML first&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;long_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;marked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;long_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a lifecycle script executed by Gatsby during build time. What this
script does is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fetch all articles from Storyblok&lt;/li&gt;
  &lt;li&gt;create an index page with all the articles so you have a complete list&lt;/li&gt;
  &lt;li&gt;create individual pages with each article&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you look into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/templates/all_article.js&lt;/code&gt; you will see:&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gatsby&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Layout&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;../components/layout&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AllArticles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pageContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;article-list&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;articles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`/article/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;AllArticles&lt;/strong&gt; component follows a pattern imposed by Gatsby. It must
receive a prop called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pageContext&lt;/code&gt;. This necessary for Gatsby to inject the
content at build-time and render the component to generate the static pages. If
you follow the convention, you get all this magic for free.&lt;br /&gt;
The same thing happens to the &lt;strong&gt;Article&lt;/strong&gt; component. it expects a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pageContext&lt;/code&gt;
prop and from there on, you can create your React component in the same way.&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;This example was very naive and simplistic, but you can already have a feeling
of what Gatsby can do. If you are considering to develop a new website and don’t
want to waste your time with tooling configuration, give Gatsby a try. It will
be probably worth it.&lt;br /&gt;
We are now evaluating if makes sense or not to build out Shop frontend with it
in a way that supports multi-language. I got some interesting feedback from
folks using Gatsby in production during my React Vienna talk that will
definitely help to try it out.&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">On February 17th, I gave a talk at the React Vienna Meetup about this topic and I thought writing a blogpost about could benefit some folks that either couldn’t make it or are living somewhere else around the globe. You can find my slides here.</summary></entry><entry><title type="html">Automating your work with Github Actions</title><link href="https://bpaulino.com/entries/10-automating-your-work-with-github-actions" rel="alternate" type="text/html" title="Automating your work with Github Actions" /><published>2019-09-06T00:00:00+00:00</published><updated>2019-09-06T00:00:00+00:00</updated><id>https://bpaulino.com/entries/automating-your-work-with-github-actions</id><content type="html" xml:base="https://bpaulino.com/entries/10-automating-your-work-with-github-actions">&lt;p&gt;I have finally joined the &lt;a href=&quot;https://github.com/features/actions&quot;&gt;Github Actions&lt;/a&gt;
beta program this week and figured why not play with it for a bit and see what I
can do. So my first idea was to automate the deployment process of my blog, this
one you are currently reading. I am currently using
&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; as my static site generator. It works flawless
for what I need. I just write whatever I want using
&lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; and Jekyll digests
everything inside my source folder and spits out HTML, CSS and JS files in a
&lt;strong&gt;“ready-to-publish”&lt;/strong&gt; folder where I can just upload to the cloud.&lt;/p&gt;

&lt;p&gt;I am currently using &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; to host my blog
and it has been working perfectly fine for the past couple years.&lt;/p&gt;

&lt;h2 id=&quot;but-how-does-a-github-action-work-anyway&quot;&gt;But how does a Github Action work anyway?&lt;/h2&gt;

&lt;p&gt;Github Actions is a way to perform tasks automatically for you. To give you an
example, I will use my blog workflow.&lt;br /&gt;
It all starts when I want to write a new post. I just create a new markdown
file, write down whatever is on my head and save it. After this whole process, I
need a way to transform my text in a website. Jekyll is doing the heavy-lifting
for me, so I just go to my terminal and type:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This command will generate my entire website and all its dependencies&lt;/span&gt;
jekyll build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After generating all the necessary files, I need to upload it somewhere. In this
case, I just have to commit my changes to a specific branch called &lt;strong&gt;gh-pages&lt;/strong&gt;
and Github will serve my site on the web. For doing that, I usually perform the
following commands in a bash script:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This is the folder Jekyll generates with my website. Lets just open it&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site
&lt;span class=&quot;c&quot;&gt;# Now we need a new git repository here,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# so I can commit only the generated files and skip the source files&lt;/span&gt;
git init
git config user.name &lt;span class=&quot;s2&quot;&gt;&quot;Bruno Paulino&quot;&lt;/span&gt;
git config user.email &lt;span class=&quot;s2&quot;&gt;&quot;bruno@bpaulino.com&quot;&lt;/span&gt;
git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# That will create a nice commit message with something like:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# New Build - Fri Sep 6 12:32:22 UTC 2019&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;New Build - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Now lets push my commit to the gh-pages branch and replace everything there&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://brunojppb@github.com/brunojppb.github.io.git
git push &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$REPO&lt;/span&gt; master:gh-pages
&lt;span class=&quot;c&quot;&gt;# Lets do some cleanup here since we don't need the generated files anymore&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fr&lt;/span&gt; .git
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; _site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is pretty simple right? It is indeed, but how cool would that be if Github
could do that for me instead? That is where Github Actions come to give us a
hand.&lt;/p&gt;

&lt;p&gt;It all starts with a folder on your repository called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt;.&lt;br /&gt;
inside of this folder, create a file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deploy-workflow.yml&lt;/code&gt; with the
content below. Each line will be explained with a comment:&lt;/p&gt;

&lt;h3 id=&quot;deploy-workflowyml&quot;&gt;deploy-workflow.yml&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This is the name of our workflow.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Github will show it on its Website UI&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# This configures our workflow to be triggered&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# only when we push to the master branch&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Here is where we define our jobs.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Which means the tasks we want Github to execute&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Here we specify in whith OS we want it to run&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-18.04&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Now we define which actions will take place.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# One after another&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This is the first action. It will make sure that we have&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# all the necessary files from our repo, including our custom actions&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This action here is actually from a remote repo available from Githup itself&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v1&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# This is our custom action. Here is where we will define our git commands&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# to push our website updates to the `gh-pages` branch.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Notice that we are specifying the path to the action here.&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# We will create those files in a sec&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./.github/actions/build-dist-site&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Now make sure you add this environment variable.&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# This token will allow us to push to github directly&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# without having to type in our password.&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# The GITHUB_TOKEN is available by default&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now lets create our custom action.
&lt;a href=&quot;https://help.github.com/en/articles/about-actions#types-of-github-actions&quot;&gt;Github Actions are divided in 2 types&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker container&lt;/li&gt;
  &lt;li&gt;Javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are running our action using a Docker Container. Using Docker, we make sure
the environment where our scripts are running will be the same, no matter what
happens to the Github environment. So, lets dig deeper and create our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;actions&lt;/code&gt;
folder under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# build-dist-site will be the folder for holding&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# our action configuration (Dockerfile, scripts and Metadata)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; .github/actions/build-dist-site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/actions/build-dist-site&lt;/code&gt; lets create 3 files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action.yml&lt;/code&gt;: It will hold the metadata of our action&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile:&lt;/code&gt; Will specify our Docker image to run Jekyll in a container&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoint.sh:&lt;/code&gt; Will have our custom scripts to generate and deploy our
website update&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h3&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Our Docker image will be based on ruby:2-slim&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# it is a very light docker image.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ruby:2-slim&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LABEL&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; author=&quot;Bruno Paulino&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;LABEL&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; version=&quot;1.0.0&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Lets install all dependencies&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# including git and Bundler 2.0.2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; BUNDLER_VERSION 2.0.2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--no-install-recommends&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        bats &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        build-essential &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        ca-certificates &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        curl &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        libffi6 &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        make &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        shellcheck &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        libffi6 &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;        git-all &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler:2.0.2 &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bundle config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; silence_root_warning 1

&lt;span class=&quot;c&quot;&gt;# This is our entrypoint to our custom scripts&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# more about that in a sec&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; entrypoint.sh /&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Use the entrypoint.sh file as the container entrypoint&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# when Github executes our Docker container&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;sh&quot;, &quot;/entrypoint.sh&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have our Dockerfile ready, we need to tell Github to use it. That is
why we need the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;h3 id=&quot;actionyml&quot;&gt;action.yml&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Ok, here the keys are pretty much self explanatory :)&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Deploy&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;version&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Setup&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Ruby&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;version&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Bruno&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Paulino&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;runs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;using&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;docker&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Dockerfile&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action.yml&lt;/code&gt; file tells Github what to do. In this case, just tell it to use
Docker and use our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; to build the container with it.&lt;/p&gt;

&lt;p&gt;Now we just need our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entrypoint.sh&lt;/code&gt; script to execute our website generation
and deployment. Lets get our hands dirty with a bit of bash script:&lt;/p&gt;

&lt;h3 id=&quot;entrypointsh&quot;&gt;entrypoint.sh&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Exit immediately if a pipeline returns a non-zero status.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;🚀 Starting deployment action&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Here we are using the variables&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - GITHUB_ACTOR: It is already made available for us by Github. It is the username of whom triggered the action&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - GITHUB_TOKEN: That one was intentionally injected by us in our workflow file.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Creating the repository URL in this way will allow us to `git push` without providing a password&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# All thanks to the GITHUB_TOKEN that will grant us access to the repository&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;REMOTE_REPO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_ACTOR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@github.com/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_REPOSITORY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.git&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We need to clone the repo here.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Remember, our Docker container is practically pristine at this point&lt;/span&gt;
git clone &lt;span class=&quot;nv&quot;&gt;$REMOTE_REPO&lt;/span&gt; repo
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;repo

&lt;span class=&quot;c&quot;&gt;# Install all of our dependencies inside the container&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# based on the git repository Gemfile&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;⚡️ Installing project dependencies...&quot;&lt;/span&gt;
bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Build the website using Jekyll&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;🏋️ Building website...&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Jekyll build done&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Now lets go to the generated folder by Jekyll&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# and perform everything else from there&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;☁️ Publishing website&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# We don't need the README.md file on this branch&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; README.md

&lt;span class=&quot;c&quot;&gt;# Now we init a new git repository inside _site&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# So we can perform a commit&lt;/span&gt;
git init
git config user.name &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_ACTOR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
git config user.email &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GITHUB_ACTOR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@users.noreply.github.com&quot;&lt;/span&gt;
git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# That will create a nice commit message with something like:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Github Actions - Fri Sep 6 12:32:22 UTC 2019&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Github Actions - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Build branch ready to go. Pushing to Github...&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Force push this update to our gh-pages&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$REMOTE_REPO&lt;/span&gt; master:gh-pages
&lt;span class=&quot;c&quot;&gt;# Now everything is ready.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Lets just be a good citizen and clean-up after ourselves&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fr&lt;/span&gt; .git
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; repo
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;🎉 New version deployed 🎊&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;🤯 That was a lot different from what I started with right? Ok, the reason for
that is just Docker. Now we have a more robust implementation of our deployment
pipeline where we could even move away from Github to Gitlab and reuse the
Dockerfile and entrypoint.sh (with minor changes).&lt;/p&gt;

&lt;p&gt;Now that we are armed with those files, lets commit our changes and push to
Github and see what happens. Going to our Github repository page, there you can
see a new button called &lt;strong&gt;Actions&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/github_actions_button.jpg&quot; alt=&quot;Github Actions button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets click on it. You will be taken to the &lt;strong&gt;Workflows&lt;/strong&gt; list. There we see our
&lt;strong&gt;Deploy&lt;/strong&gt; workflow we just created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/github_workflows_running.jpg&quot; alt=&quot;Github Actions button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now inside of our workflow execution context, we can see all of our actions
being executed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/github_execution_pipeline.jpg&quot; alt=&quot;Github Actions button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ok, now our automation work was fully done. As a cherry on top, you can also add
a badge to your README.md file showing the current status of your custom actions
like that:&lt;/p&gt;

&lt;div class=&quot;language-md highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gh&quot;&gt;# Where /deploy/ must be replaced with your workflow name&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;![&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;workflow-badge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://github.com/brunojppb/brunojppb.github.io/workflows/deploy/badge.svg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That will render a nice image by Github on your repository page with the current
action status. &lt;img src=&quot;/assets/images/github_action_badge.jpg&quot; alt=&quot;Github Actions Badge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now I can enjoy my time spent building and deploying my website doing something
else like playing video games 🎮 or drawing 🎨. Here is the
&lt;a href=&quot;https://github.com/brunojppb/brunojppb.github.io&quot;&gt;open-source repository of my blog if you want to take a look.&lt;/a&gt;&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">I have finally joined the Github Actions beta program this week and figured why not play with it for a bit and see what I can do. So my first idea was to automate the deployment process of my blog, this one you are currently reading. I am currently using Jekyll as my static site generator. It works flawless for what I need. I just write whatever I want using Markdown and Jekyll digests everything inside my source folder and spits out HTML, CSS and JS files in a “ready-to-publish” folder where I can just upload to the cloud.</summary></entry><entry><title type="html">Takeaways on The Mythical Man-Month book</title><link href="https://bpaulino.com/entries/9-mythical-man-month" rel="alternate" type="text/html" title="Takeaways on The Mythical Man-Month book" /><published>2019-04-23T00:00:00+00:00</published><updated>2019-04-23T00:00:00+00:00</updated><id>https://bpaulino.com/entries/takeaways-on-the-mythical-man-month</id><content type="html" xml:base="https://bpaulino.com/entries/9-mythical-man-month">&lt;p&gt;After finishing up reading the classic book
&lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Mythical_Man-Month&quot;&gt;The Mythical Man-Month&lt;/a&gt;&lt;/strong&gt;
from Frederick Brooks, it was astonishing to realize that most of his ideas are
still sharp today in the field of software engineering. Apart from very few
topics that somehow changed nowadays, I would like to point out my three
favorites topics from his essays that are still relevant today and I personally
have experienced in my career.&lt;/p&gt;

&lt;h2 id=&quot;adding-manpower-to-a-late-project-makes-it-later&quot;&gt;Adding manpower to a late project makes it later&lt;/h2&gt;

&lt;p&gt;Brooks argues that it is generally a bad idea to add more people to a project
that is already late. He has some convincing arguments:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Whenever a new member joins the team, we need to share the existing knowledge,
otherwise this person cannot contribute. It has a side effect that must be
carefully considered: The once active and productive developer, has to stop
her development tasks to take a training role, delaying the project even more.&lt;/li&gt;
  &lt;li&gt;Whenever the team grows, the communication overhead also increases, meaning
that new channels of communication will be created and the team will have to
keep up.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;good-cooking-takes-time&quot;&gt;Good cooking takes time&lt;/h2&gt;

&lt;p&gt;During some development tasks, we usually know that we can never rush it,
specially when building what is meant to be foundation of a program. On the
other hand, a business has to ship new features as fast as possible, causing the
task rush inevitable in most cases.&lt;/p&gt;

&lt;p&gt;Brooks makes a good analogy with cooking. He suggests that if you want to have
proper meal with nice taste, good appearance and nicely done, you have to give
the necessary time for the chef to prepare. Otherwise you will end up with some
disastrous food, burned in one side and raw in the other. That analogy fits
really well for certain software development tasks. We must understand what is
critical to the system, putting more thought on its design and implementation.
Rushing its completion can cause a lot of issues in the long-term of the
project.&lt;/p&gt;

&lt;h2 id=&quot;small-sharp-teams&quot;&gt;Small, Sharp Teams&lt;/h2&gt;

&lt;p&gt;Brooks really nails it down with this analogy. He uses a surgical team of
doctors to point out how a small and multidisciplinary team makes progress more
effectively.&lt;/p&gt;

&lt;p&gt;I personally have experienced that. Once working on an iOS app, I had by my side
a backend developer and a UI Designer. We three sat down and decided how the
screens would look like, how the data structure would be shaped and how the API
between the app and backend should look. This approach was unbelievable
effective. In sprints of two weeks we always had a new app release including new
features and bug fix.&lt;/p&gt;

&lt;h2 id=&quot;it-all-comes-down-to-communication&quot;&gt;It all comes down to communication&lt;/h2&gt;

&lt;p&gt;There are many other great arguments in the book where Brooks talks extensively,
but at the end of the reading what is clear is that communication is the key for
a project success. You might have the 10x rockstar developer, but if they cannot
communicate well with your team, the project is likely to fail.&lt;/p&gt;

&lt;p&gt;This book has survived the toughest of all challenges: &lt;strong&gt;Time&lt;/strong&gt;. It was
originally published in 1975 and at the time of this writing it is still rock
solid. This is a must-read for anyone interested in software engineering and
project success.&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">After finishing up reading the classic book The Mythical Man-Month from Frederick Brooks, it was astonishing to realize that most of his ideas are still sharp today in the field of software engineering. Apart from very few topics that somehow changed nowadays, I would like to point out my three favorites topics from his essays that are still relevant today and I personally have experienced in my career.</summary></entry><entry><title type="html">Why Austrian visa applications have to suck?</title><link href="https://bpaulino.com/entries/8-why-work-visa-applications-have-to-suck" rel="alternate" type="text/html" title="Why Austrian visa applications have to suck?" /><published>2018-09-18T00:00:00+00:00</published><updated>2018-09-18T00:00:00+00:00</updated><id>https://bpaulino.com/entries/why-work-visa-applications-have-to-suck</id><content type="html" xml:base="https://bpaulino.com/entries/8-why-work-visa-applications-have-to-suck">&lt;p&gt;In Austria, there are many kinds of visas, but the most common for work in the
IT field is called &lt;strong&gt;rot-weiß-rot-karte&lt;/strong&gt; (red-white-red card) and there are a
few categories which that one can pick. Mine was
&lt;a href=&quot;https://www.migration.gv.at/en/types-of-immigration/permanent-immigration/other-key-workers/&quot;&gt;&lt;strong&gt;Other key workers&lt;/strong&gt;&lt;/a&gt;.
This category can be used when a company cannot find a qualified person in the
local labor market. That is fairly common in the IT market around the world,
where usually there are more jobs available than skilled people around.&lt;/p&gt;

&lt;p&gt;I am originally from Brazil, but currently living in Vienna, Austria. in 2016,
my wife and I decided to move abroad to have a different experience. It has been
an amazing journey so far and we don’t regret of doing that.&lt;/p&gt;

&lt;p&gt;Back in 2016, I got a job offer in Vienna and I decided to take it. The company
applied for my visa and everything went well. After around 4 months waiting,
where 2 months I was working remote from Brazil and 2 months after moving to
Austria, I got the letter saying my visa was approved and I should go to the
immigration office to grab my documents.&lt;/p&gt;

&lt;p&gt;One year and a half has passed, the work was fine and the team was great. But as
some of you may know, the mother tong here is German, and none of us spoke it
when we decided to come. For developers, that is usually not an issue. Most of
the companies here either have English as its main language or the entire team
speak English fluently. But if you are working on a different field, like my
wife, it is quite tough to fit in the labor market.&lt;/p&gt;

&lt;p&gt;As the solo earner at home, things were starting to get a bit tricky. We could
afford only one of us to take German classes and my wife was obviously the one
that should take it. After almost 2 years, she can speak quite a lot already,
but she is still trying to find a job that is willing to take a B2 German level
speaker like her.&lt;/p&gt;

&lt;p&gt;Around April 2018, I have got a job offer from an awesome company also here in
Vienna where the income difference was considerable. It would make things a bit
smoother as they also offered to pay German lessons for me. That was a big deal.
Even though I really enjoyed my former job, I couldn’t turn down an opportunity
like that. But as an immigrant, there was a catch: I could only work for the
company that have applied for my first visa, which means if I left my job, I
would no longer have a work visa and I should move back to my country.&lt;/p&gt;

&lt;p&gt;According to the Austrian immigration office, I should apply again for a new
visa with the new company, but theoretically as I was a Red-White-Red card
holder already, I wouldn’t have to go through all the technical steps again
(Diploma validation, English or German skills validation, etc…). I decided to
take the risk and accepted the job.&lt;/p&gt;

&lt;p&gt;After that decision, some unexpected things happened. I am writing this so if
you are in a similar situation or considering to move abroad, you might want to
think twice about what could happen, specially if you have a family to provide
for.&lt;/p&gt;

&lt;p&gt;It took 5 freaking months to receive the final decision. I was unemployed for
this whole period, even though I had a job offer, an working visa, was living in
the country for almost 2 years and the company had a letter from the AMS
(Austrian labor office) stating they couldn’t find any professional available in
the local market. What would have happened if I didn’t have any savings? I
cannot even imagine.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Some things you should consider before deciding to move:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;You cannot work for the new company until the visa is ready. Actually, if
you are in the country already, you cannot work at all until you have the
visa.&lt;/li&gt;
    &lt;li&gt;If you don’t have a tourist visa, you are f*cked. As a Brazilian, I am
lucky enough to have a tourist period of 3 months to stay without having to
apply for it. And also as I applied for the new visa before the former
company deregistered me, I could stay and wait for the new visa even after
the 3 months period expired. Depending on your passport, you might have to
leave the country immediately.&lt;/li&gt;
    &lt;li&gt;As soon as I left my former job, I was deregistered from my health
insurance. Although I wanted to keep paying for it, they didn’t allow me.
Long story short, my wife and I were left alone without insurance. We had to
use travel insurance during this period.&lt;/li&gt;
    &lt;li&gt;Although I already provided them proof of my skills on my first visa
application, they required me to prove everything again. I had to take the
TOEFL test and prove once again that I had a professional level of English.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;From the economic standpoint, the state just wasted 5 months of my tax
contributions where I could have been paying happily (taxes are quite high in
Austria compared to Brazil). The state could also have lost a good contributor,
since I could have changed my mind, decided not to continue with the visa
application and move back to my country.&lt;/p&gt;

&lt;p&gt;I got my new visa 2 weeks ago and I don’t regret accepting the new job, but I
don’t think I would do the visa application again. If I have to go through this
whole visa process once more, I would rather move back to my country and work
remote.&lt;/p&gt;

&lt;p&gt;Of course I am talking about my experience in Austria. For other countries it
will most probably be different. What I think is important to consider is the
potential of attracting skilled workers (which means, good tax payers) that some
countries are just ignoring and with remote work on the rise, people don’t even
have to think about this whole visa trouble. At the end, everyone loses.&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">In Austria, there are many kinds of visas, but the most common for work in the IT field is called rot-weiß-rot-karte (red-white-red card) and there are a few categories which that one can pick. Mine was Other key workers. This category can be used when a company cannot find a qualified person in the local labor market. That is fairly common in the IT market around the world, where usually there are more jobs available than skilled people around.</summary></entry><entry><title type="html">Scala 101: Funções</title><link href="https://bpaulino.com/entries/7-scala-101-funcoes" rel="alternate" type="text/html" title="Scala 101: Funções" /><published>2017-07-27T00:00:00+00:00</published><updated>2017-07-27T00:00:00+00:00</updated><id>https://bpaulino.com/entries/scala-101-funcoes</id><content type="html" xml:base="https://bpaulino.com/entries/7-scala-101-funcoes">&lt;p&gt;Continuando meus estudos em Scala, temos que falar de um conceito muito
importante da linguagem: Funções. Em Scala, funções são tratados como valores
normais como Int e String, ou seja, podemos declarar funções, armazená-las em
variáveis e até passá-las como parâmetro para outras funções. Aqui utilizarei os
exemplos do livro Scala in Action, mostrando como utilizar funções, desde o
básico até casos mais avançados. Abaixo temos o exemplo clássico de como
utilizar funções:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UseResource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A função &lt;strong&gt;&lt;em&gt;use&lt;/em&gt;&lt;/strong&gt; definida a cima é chamada de método, pois é definida dentro
da classe &lt;strong&gt;&lt;em&gt;UseResource&lt;/em&gt;&lt;/strong&gt; e pode causar efeitos colaterais no estado do
objeto. Essa é uma das desvantagens de utilizar métodos ao invés de funções
puras. Vejamos um próximo exemplo:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;addOne&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;addOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// output: 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A grande diferença entre os exemplos citados a cima é que a segunda não modifica
estado, sendo considerada uma função pura.&lt;/p&gt;

&lt;h2 id=&quot;higher-order-functions&quot;&gt;Higher-order functions&lt;/h2&gt;

&lt;p&gt;São as funções que recebem funções como parâmetro e que podem retornar funções
como retorno. Um exemplo disso é a função &lt;strong&gt;&lt;em&gt;filter&lt;/em&gt;&lt;/strong&gt; em listas. Ela recebe uma
função literal e retorna uma lista como os elementos que passaram pelo “filtro”.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// _ representa o o primeiro elemento da tupla passada pela função filter&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// output: List(2, 4, 6, 8, 10)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Também poderiamos escrever dessa forma:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ou dessa forma&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;filterFunc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filterFunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;problemas-da-vida-real&quot;&gt;Problemas da Vida Real&lt;/h2&gt;

&lt;p&gt;Agora aplicando esses conceitos no dia-a-dia, é comum termos o cenário onde
precisamos utilizar um *&lt;strong&gt;*Resource**&lt;/strong&gt;, seja ele um arquivo ou um socket na
rede. Sempre que finalizamos a utilização, precisamos fechar esse recurso, de
forma que ele possa ser retomado pelo SO e que seja usado por outra aplicação.
Se não fechamos o recurso, podemos der um caso de memory leak, onde teremos esse
recurso na memória por tempo indeterminado e outros vários problemas. Geralmente
temos o seguinte código ao utilizar um recurso:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;doSomeCrazyStuff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Perceba que a utilização do catch é opicional em Scala. Veremos Error Handling em outro post&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Perceba que sempre que você precisar utilizar um recurso, você terá essa
repetição de código para ter certeza que seu recurso seja utilizado
corretamente. Porém e se esquecermos de adicionar o bloco try-finally? Para
evitar repetição, podemos escrever uma função que receba um Resource e uma
função como parâmetros e todo esse boilerplate será evitado:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Resource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Agora podemos usar a função 'use' sem o bloco try-finally&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;resourceToUse&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;doSomeCrazyStuff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceToUse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// o recurso será fechado automaticamente.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;currying&quot;&gt;Currying&lt;/h2&gt;

&lt;p&gt;Currying é a técnica de transformar uma função que recebe vários parâmetros em
outra função que recebe apenas um. Um bom exemplo da vida real onde podemos ver
o benefício do currying é a injeção de dependência. Onde não nos preocupamos em
como o objeto foi criado, apenas nos preocupamos em utilizar a instância já
provida pelo injetor.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaxService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;taxIt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productPrice&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOFTaxService&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaxService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// retorna 10% do valor do produto&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;taxIt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;productPrice&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;productPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// taxIt recebe um TaxService o preço de produto.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Retorna o valor aplicado pelo TaxService injetado.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;taxIt&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TaxService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taxService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;taxService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;taxIt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// utilizando .curried, podemos injetar uma instancia do IOFTaxService.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;taxService&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;taxIt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;curried&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOFTaxService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Agora podemos apenas utilizar a função taxIt sem se preocupar qual o tipo de serviço&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// de aplicação de imposto que está sendo utilizado.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;taxToPay&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;taxService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// output: Double = 10.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">Continuando meus estudos em Scala, temos que falar de um conceito muito importante da linguagem: Funções. Em Scala, funções são tratados como valores normais como Int e String, ou seja, podemos declarar funções, armazená-las em variáveis e até passá-las como parâmetro para outras funções. Aqui utilizarei os exemplos do livro Scala in Action, mostrando como utilizar funções, desde o básico até casos mais avançados. Abaixo temos o exemplo clássico de como utilizar funções:</summary></entry><entry><title type="html">Scala 101: Aprendendo Programação Funcional</title><link href="https://bpaulino.com/entries/6-scala-101-aprendendo-programacao-funcional" rel="alternate" type="text/html" title="Scala 101: Aprendendo Programação Funcional" /><published>2017-02-05T00:00:00+00:00</published><updated>2017-02-05T00:00:00+00:00</updated><id>https://bpaulino.com/entries/scala-101-aprendendo-programacao-funcional</id><content type="html" xml:base="https://bpaulino.com/entries/6-scala-101-aprendendo-programacao-funcional">&lt;p&gt;Trabalhando no &lt;a href=&quot;https://www.journiapp.com/&quot;&gt;journi&lt;/a&gt; como iOS developer, em
poucos meses, percebi que a melhor forma de aprender e evoluir rápido é usando o
que você precisa no dia-a-dia. Todo dia um desafio novo, um nova funcionalidade
para implementar e forma nova de aprender algo. Agora chegou a hora de trabalhar
em nosso backend. Como a alguns amigos sabem, eu tenho trabalhado com Ruby on
Rails em meu trabalho passando, onde adquiri um bom conhecimento no assunto.
Porém nosso backend aqui na empresa é escrito em Scala. Um linguagem que trás o
melhor dos 2 mundos: Orientação a Objeto e Programação Funcional.&lt;/p&gt;

&lt;p&gt;Enquanto aprendo &lt;em&gt;on the fly&lt;/em&gt; todos os dias na empresa, resolvi comprar o livro
&lt;a href=&quot;https://www.amazon.com/Scala-Action-Covers-2-10/dp/1935182757&quot;&gt;Scala in Action&lt;/a&gt;
para aprender melhor os conceitos da linguagem, como também criar uma série de
posts durante a leitura. Isso vai facilitar meu aprendizado e ao mesmo tempo
poderei compartilhar com você que está lendo isso aqui agora e provavelmente
está interessado em aprender um pouco mais sobre Scala.&lt;/p&gt;

&lt;h3 id=&quot;sobre-a-linguagem&quot;&gt;Sobre a Linguagem&lt;/h3&gt;

&lt;p&gt;Scala é uma linguagem multi-paradigma desenvolvida por
&lt;a href=&quot;https://twitter.com/odersky&quot;&gt;Martin Odersky&lt;/a&gt; em seu laboratório na EPFL(École
Polytechnique Fédérale de Lausanne) na Suíça em 2001. O principal objetivo da
linguagem é expressar padrões conhecidos de programação de forma concisa e
eficiente, integrando funcionalidades do estilo orientado a objeto e programação
funcional. Outra grande vantagem da linguagem é rodar em cima da JVM(Java
Virtual Machine) a qual é extremamente eficiente e também poder usar todas as
bibliotecas Java disponíveis, sendo uma linguagem 100% compatível com as
funcionalidades Java.&lt;/p&gt;

&lt;h3 id=&quot;instalação&quot;&gt;Instalação&lt;/h3&gt;

&lt;p&gt;Como Scala roda em cima da JVM, nós precisamos do
&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Java SDK&lt;/a&gt;
instalado. Após a instalação do Java SDK, baixe o
&lt;a href=&quot;http://www.scala-lang.org/download/&quot;&gt;Instalador Scala&lt;/a&gt; e prossiga com a
instalação. Abra seu terminal e verifique a versão instalada com o comando&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scala &lt;span class=&quot;nt&quot;&gt;-version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/scala_current_version.png&quot; alt=&quot;versão atual&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;scala-repl&quot;&gt;Scala REPL&lt;/h3&gt;

&lt;p&gt;Como programador Ruby, estou acostumado a ter um console rápido onde posso
escrever um código rápido e testa-lo sem precisar instalar uma IDE e criar uma
aplicação, em Scala não é diferente. com o Scala REPL(read-evaluate-print loop)
podemos executar código Scala direto em nosso terminal e ter resposta imediata.
Isso facilita bastante o uso da linguagem para aprendizado e para testes
rápidos.&lt;/p&gt;

&lt;p&gt;Abra seu terminal e execute o comando:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;scala
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Logo você verá seu console aguardando seu input e cada linha adicionada é
avaliada imediatamente trazendo sua resposta. #rubyFeelings&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/scala_repl.png&quot; alt=&quot;Scala REPL&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;declarando-variáveis&quot;&gt;Declarando Variáveis&lt;/h2&gt;

&lt;p&gt;podemos declarar variáveis de 2 formas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;var: usada para variáveis mutáveis, ou seja, quando você pode modificar;&lt;/li&gt;
  &lt;li&gt;val: usada para variáveis imutáveis, ou seja, depois de declarada, não podemos
modificar seu valor.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vejamos os exemplos:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nomeMutavel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;John Due&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// vamos modificar nomeMutavel&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nomeMutavel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Felix Roger&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Agora usando val, se tentarmos modificar, teremos um erro:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nomeImutavel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bruno Paulino&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nomeImutavel&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Paulino Bruno&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// error: reassignment to val&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vejam que podemos suprir o tipo, pois Scala infere o tipo basedo no valor do
lado direito&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Declarando tipo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nome&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bruno&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Usando inferencia&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sobrenome&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Paulino&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;definindo-funções&quot;&gt;Definindo funções&lt;/h2&gt;

&lt;p&gt;definir funções em Scala é bem parecido com Java ou Ruby. Com algumas diferenças
é claro. Vamos para os exemplos:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Na definição da função soma temos 2 parametros: a e b, onde definimos seus tipos separados por :(dois pontos) e o tipo de retorno(que também é opcional) Int.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Em seguida temos corpo da função. reparem que não utilizamos a palavra chave 'return' pois em Scala a última linha executada é retornada e o tipo de retorno da função(se não declaramos) é inferido.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;soma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;a+b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//executando a função:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;resultado&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;soma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;funções-como-parâmetro&quot;&gt;Funções como Parâmetro&lt;/h3&gt;

&lt;p&gt;Em Scala, funções também são objetos, logo podemos passar funções como
parâmetros em outras funções. Vejamos um exemplo utilizando a função map em
listas, a qual recebe uma função que receba um parâmetro e retorne o mesmo tipo
do parâmetro:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Função que eleva um número ao quadrado&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aoQuadrado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lista&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;resultado&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lista&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aoQuadrado&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// List[Int] = List(1, 4, 9, 16, 25)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;controle-de-fluxo&quot;&gt;Controle de Fluxo&lt;/h3&gt;

&lt;p&gt;Usar &lt;em&gt;if&lt;/em&gt; e &lt;em&gt;else&lt;/em&gt; em Scala é bem parecido como em outras linguagens, porém
temos um benefício: valor de retorno. Vamos ao exemplo:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;idade&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;quantidade&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Usando &lt;em&gt;for&lt;/em&gt;, &lt;em&gt;while&lt;/em&gt; e &lt;em&gt;do-while&lt;/em&gt; não é muito diferente do Java, porém em Scala
temos compreensão de lista, que torna nosso loop ainda mais poderoso. Podemos
adicionar filtros na cláusula &lt;em&gt;for&lt;/em&gt; e executarmos apenas o necessário. Vamos ao
exemplo:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lista&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;numero&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lista&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dobro&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numero&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dobro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dobro&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 12, 14, 16, 18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">Trabalhando no journi como iOS developer, em poucos meses, percebi que a melhor forma de aprender e evoluir rápido é usando o que você precisa no dia-a-dia. Todo dia um desafio novo, um nova funcionalidade para implementar e forma nova de aprender algo. Agora chegou a hora de trabalhar em nosso backend. Como a alguns amigos sabem, eu tenho trabalhado com Ruby on Rails em meu trabalho passando, onde adquiri um bom conhecimento no assunto. Porém nosso backend aqui na empresa é escrito em Scala. Um linguagem que trás o melhor dos 2 mundos: Orientação a Objeto e Programação Funcional.</summary></entry><entry><title type="html">Indo Estudar nos EUA</title><link href="https://bpaulino.com/entries/5-indo-estudar-no-exterior-eua-20142015" rel="alternate" type="text/html" title="Indo Estudar nos EUA" /><published>2016-12-15T00:00:00+00:00</published><updated>2016-12-15T00:00:00+00:00</updated><id>https://bpaulino.com/entries/indo-estudar-no-exterior-eua-20142015</id><content type="html" xml:base="https://bpaulino.com/entries/5-indo-estudar-no-exterior-eua-20142015">&lt;p&gt;Em Julho de 2014 tive uma das melhores oportunidades da minha vida: &lt;strong&gt;Estudar
Fora do País&lt;/strong&gt;. Durante minha graduação no &lt;a href=&quot;http://www.ifpb.edu.br/&quot;&gt;IFPB&lt;/a&gt; no
Curso Superior de Tecnologia em Sistemas para Internet (TSI), decobri o programa
governamental
&lt;a href=&quot;http://www.cienciasemfronteiras.gov.br/&quot;&gt;Ciências sem Fronteiras&lt;/a&gt;. Após ler
toda a documentação no site, resolve procurar amigos ou conhecidos que já
participaram do programa no passado. Dois grandes amigos da mesma turma de TSI
estavam participando de programas de intercâmbio no momento, um no Canadá e
outro nos Estados Unidos. Passei algumas semanas conversando com eles e
adquirindo um pouco da experiência a qual eles estavam passando no momento. Eles
confirmaram tudo aquilo que eu já imaginava. Uma experiência única que só
estando lá conseguiria descrever.&lt;/p&gt;

&lt;p&gt;Foi então que resolvi arriscar, ou melhor, resolvi tentar. Como um grande amigo
me ensinou 7 anos atrás que o &lt;em&gt;não&lt;/em&gt; nós sempre temos, eu não tinha nada a perder
ao tentar conseguir uma bolsa de estudos no exterior. Foi ai que depois de mais
de um ano de planejamento, provas, espera, envio de documentos, passaporte e
visto a tão esperada viagem aconteceu. Em meados de julho de 2013 um novo edital
para bolsas nos Estados Unidos foi lançado. Ao Analizar todos os requisitos,
percebi que estava habilitado ao concorrer a uma das bolsas, porém apenas um
critério me deixava com um pouco de medo: &lt;a href=&quot;https://www.ets.org/toefl&quot;&gt;TOEFL&lt;/a&gt;.
Exame internacionalmente reconhecido, ele mede o seu nível na língua inglesa. A
maioria das universidades nos Estados unidos utilizam esse teste para avaliar o
nível de inglês de alunos internacionais, e dependendo do seu resultado, sua
aceitação pode ser negada. De acordo com o edital do programa Ciências sem
Fronteiras, nós teríamos 3 níveis de bolsas onde os alunos com pontuação muito
elevada poderiam ser aceitos diretamente nas universidades. Os alunos com notas
acima da média receberiam 3 meses de aulas de inglês na própria universidade e,
ao termino, iniciariam as aulas na universidade. Os alunos com notas medianas
receberiam o mesmo tratamento do segundo grupo, porém ao invés de 3 meses de
aulas de inglês, receberiam 6 meses. Os alunos abaixo da média seriam cortados
do programa.&lt;/p&gt;

&lt;p&gt;Assim que iniciei meus estudos no IFPB eu percebi que precisaria aprender
inglês. Tudo na área de tecnologia é escrito em inglês, as linguagens de
programação são escritas em inglês, os melhores sites são em inglês, os melhores
livros são escritos em inglês e a lista so cresce. Percebendo essa necessidade,
que é básica em muitos países desenvolvidos(como na Áustria onde moro
atualmente), resolvi cumprir o papel do estado, o qual foi omisso durante toda a
minha educação básica, e me matriculei em uma escola particular de inglês em
João Pessoa. Durante 2 anos, eu teria aulas todos os sábados durante 2 horas.
Nada se compara a uma experiência em um país de lingua inglesa durante alguns
meses, porém esses 2 anos de aulas foram suficientes para me ajudar a construir
uma boa base, me dando condições de evoluir rapidamente.&lt;/p&gt;

&lt;p&gt;Com essa simples base que pude construir ao longo de 2 anos, é chegado o momento
da prova. Realizamos o exame em nossa própria instituição, onde ficamos por 3
horas sendo avaliados. Com o passar de algumas semanas recebemos o resultado.
Fiquei no segundo grupo. Eu receberia 3 meses de aulas de inglês nos Estados
Unidos, com um professor americano e logo após ingressaria na universidade.&lt;/p&gt;

&lt;p&gt;Após todo o processo de aceitação no
&lt;a href=&quot;http://www.fit.edu/&quot;&gt;Florida Institute of Technology (FIT)&lt;/a&gt;, em junho de 2014
eu estava em Melbourne, Florida, iniciando minhas aulas de inglês. Passados 3
meses aulas de inglês, 8 horas por dia, 5 dias por semana, percebi o quanto eu
aprendi em tão pouco tempo. Arrisco a dizer que esse pouco tempo equivaleria a
mais de 20 anos de aulas nos sábados nas escolas particulares no Brasil. Um dica
que dou para todos os meus amigos é: &lt;em&gt;Junte grana e vá fazer um curso de inglês
fora. Nem que seja por apenas 20 dias. Vai valer muito mais a pena que pagar por
um ano de inglês no Brasil.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ao ingressar no FIT, percebi que as aulas não são muito diferentes que as aulas
no Brasil. A diferença está no interesse dos alunos e no suporte que esses
mesmos alunos recebem dos professores e da instituição. Tive a grande
oportunidade de trabalhar com um dos melhores professores da instituição, o Dr.
Eraldo Ribeiro, e aprendi muito sobre como o ensino e a pesquisa funcionavam la
fora. Foram 2 semestres de muito aprendizado, não apenas conhecimentos técnicos,
mas também uma grande experiência cultural, a qual mudou completamente minha
forma de ver o mundo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/fit_diploma.jpg&quot; alt=&quot;Entrega do diploma pelo Presidente do FIT Dr. Anthony James Catanese&quot; /&gt;
&lt;span style=&quot;text-align: center; display: block; font-weight: bold;&quot;&gt; Entrega do
diploma pelo Presidente do FIT Dr. Anthony James Catanese &lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ao finalizar meu segundo semestre no FIT, tive a grande oportunidade de realizar
estágio no
&lt;a href=&quot;http://www.embraer.com/en-us/Pages/home.aspx&quot;&gt;Embraer Engineering &amp;amp; Technology Center (EETC)&lt;/a&gt;
como Web Developer. Trabalhei com pessoas incríveis de todo o mundo, aprendi
muito sobre a cultura do trabalho americano e como os relacionamentos
interpessoais possuem um papel gigantesco em nossas carreiras. Foram 3 meses de
muitas experiências, onde fiz muitos amigos, recebi valiosíssimos conselhos que
estão me ajudando até os dias de hoje.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/inside_embraer_lineage_1000.jpg&quot; alt=&quot;Visita ao Embraer Lineage 1000&quot; /&gt;
&lt;span style=&quot;text-align: center; display: block; font-weight: bold;&quot;&gt; Visita ao
Embraer Lineage 1000 &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Claro que se eu fosse descrever tudo o que aconteceu durante um ano e meio isso
renderia um texto gigante (Me arrependo de não ter escrito sobre as experiências
durante aquele tempo), porém a mensagem que quero passar é de que sempre saia da
sua zona de conforto, procure desafios que te levarão mais um nível acima, algo
que te faça evoluir para melhor. Não cometa o erro de pensar que será fácil e
rápido, mudanças sempre exigem um esforço maior, porém as recompensas serão
muito maiores.&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">Em Julho de 2014 tive uma das melhores oportunidades da minha vida: Estudar Fora do País. Durante minha graduação no IFPB no Curso Superior de Tecnologia em Sistemas para Internet (TSI), decobri o programa governamental Ciências sem Fronteiras. Após ler toda a documentação no site, resolve procurar amigos ou conhecidos que já participaram do programa no passado. Dois grandes amigos da mesma turma de TSI estavam participando de programas de intercâmbio no momento, um no Canadá e outro nos Estados Unidos. Passei algumas semanas conversando com eles e adquirindo um pouco da experiência a qual eles estavam passando no momento. Eles confirmaram tudo aquilo que eu já imaginava. Uma experiência única que só estando lá conseguiria descrever.</summary></entry><entry><title type="html">Ruby on Rails na Prática</title><link href="https://bpaulino.com/entries/4-curso-rails-para-iniciantes" rel="alternate" type="text/html" title="Ruby on Rails na Prática" /><published>2016-11-12T00:00:00+00:00</published><updated>2016-11-12T00:00:00+00:00</updated><id>https://bpaulino.com/entries/curso-rails-para-iniciantes</id><content type="html" xml:base="https://bpaulino.com/entries/4-curso-rails-para-iniciantes">&lt;p&gt;Dando continuidade a meu curso sobre a
&lt;a href=&quot;https://bpaulino.com/entries/3-curso-ruby-para-iniciantes&quot;&gt;linguagem Ruby&lt;/a&gt;,
resolvi criar um curso básico sobre Ruby on Rails, criando uma aplicação de
agenda de contatos totalmente do zero, mostrando todos os passos desde a criação
dos models, controllers, comunicação com a view, autenticação de usuário e
internacionalização da aplicação.&lt;/p&gt;

&lt;p&gt;O curso está publicado na Udemy de graça.&lt;/p&gt;

&lt;h3 style=&quot;display: block; text-align: center;&quot;&gt;
 &lt;a href=&quot;https://www.udemy.com/ruby-on-rails-5-na-pratica/&quot;&gt;Click aqui para acessar o curso na Udemy&lt;/a&gt;
&lt;/h3&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">Dando continuidade a meu curso sobre a linguagem Ruby, resolvi criar um curso básico sobre Ruby on Rails, criando uma aplicação de agenda de contatos totalmente do zero, mostrando todos os passos desde a criação dos models, controllers, comunicação com a view, autenticação de usuário e internacionalização da aplicação.</summary></entry><entry><title type="html">Ruby Para Iniciantes</title><link href="https://bpaulino.com/entries/3-curso-ruby-para-iniciantes" rel="alternate" type="text/html" title="Ruby Para Iniciantes" /><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><id>https://bpaulino.com/entries/curso-ruby-para-iniciantes</id><content type="html" xml:base="https://bpaulino.com/entries/3-curso-ruby-para-iniciantes">&lt;p&gt;1 ano e meio atrás eu descobri o Ruby. Nesse pouco tempo utilizando essa
maravilhosa linguagem, a experiência que tenho tido já me permitiu decidir que
essa será a linguagem que irei investir em meus projetos pessoais e em minha
carreira profissional. Tenho o imenso orgulho de fazer parte de nossa comunidade
local, &lt;a href=&quot;https://twitter.com/JampaRuby&quot;&gt;Jampa Ruby&lt;/a&gt;, e de poder contribuir com o
que venho aprendendo.&lt;/p&gt;

&lt;p&gt;Trabalhando como desenvolvedor web na
&lt;a href=&quot;http://www.pm.pb.gov.br/&quot;&gt;Policia Militar da Paraíba&lt;/a&gt;, nosso time decidiu
investir na liguagem Ruby para novos projetos. Como eu era o único desenvolvedor
que possuia experiência com Ruby, encaramos a necessidade de difundir o
conhecimento para que os desenvolvedores da equipe, já bem experientes em PHP,
pudessem aprender rápido e começar a produzir utilizando Ruby. Em nossa área de
desenvolvimento de software, sabemos que os melhores materiais estão escritos em
inglês e se formos esperar que livros e artigos dos melhores blogs sejam
traduzidos para português, não poderiamos acompanhar esse rítimo louco da
comunidade de software. Juntando a demora na tradução dos materiais e a
dificuldade com a língua inglesa, resolvi criar essa série de videoaulas sobre a
linguagem Ruby para que meu time e qualquer pessoa da comunidade possa aprender
a usar o Ruby rapidamente. Essas videoaulas são direcionadas a desenvolvedores
que já programam em alguma linguagem, de preferência Orientada a Objetos, porém
não será difícil de aprender Ruby para quem nunca programou.&lt;/p&gt;

&lt;p&gt;O curso está publicado na Udemy de graça.&lt;/p&gt;

&lt;h2 style=&quot;display: block; text-align: center;&quot;&gt;&lt;a href=&quot;https://www.udemy.com/ruby-para-iniciantes/&quot;&gt;Clique aqui para acessar o curso na Udemy&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;referências&quot;&gt;Referências&lt;/h2&gt;

&lt;p&gt;Me inspirei em muitos materiais e livros que li, cursos que fiz e experiencias
que tive. O primeiro livro que recomendo é
&lt;a href=&quot;http://learnrubythehardway.org/book/&quot;&gt;Learn Ruby - The Hard Way&lt;/a&gt; onde tive meu
primeiro contato com a linguagem. É um livro prazeroso de ler, com muitos
exêmplos e exercícios que vão ajudar a entender os principais conceitos da
linguagem. O segundo livro, mais voltado para o framework Rails, foi onde
realmente mergulhei de cabeça na linguaguem. o livro
&lt;a href=&quot;https://www.railstutorial.org/book&quot;&gt;Ruby on Rails Tutorial&lt;/a&gt;. O terceiro livro
&lt;a href=&quot;https://pragprog.com/book/ppmetr2/metaprogramming-ruby-2&quot;&gt;Metaprogramming Ruby 2&lt;/a&gt;,
que já é um pouco mais avançado, fala sobre metaprogramação em Ruby. Esse livro
mostra todo o poder da linguagem, mostrando “como escrever programas que
escrevem programas”. Os dois primeiros livros são gratuitos para ler online. O
único ponto negativo para quem não sabe inglês é que não possuem tradução.&lt;/p&gt;

&lt;p&gt;Um ótimo curso que me inspirou bastante foi o
&lt;a href=&quot;https://app.pluralsight.com/library/courses/ruby-fundamentals/table-of-contents&quot;&gt;Ruby Fundamentals&lt;/a&gt;
da &lt;a href=&quot;http://pluralsight.com/&quot;&gt;Pluralsight&lt;/a&gt;. Utilizei algumas técnicas do curso
para organizar o conteúdo e realizar alguns exêmplos. O curso também e
ministrado em inglês, porém possui legendas em português.&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">1 ano e meio atrás eu descobri o Ruby. Nesse pouco tempo utilizando essa maravilhosa linguagem, a experiência que tenho tido já me permitiu decidir que essa será a linguagem que irei investir em meus projetos pessoais e em minha carreira profissional. Tenho o imenso orgulho de fazer parte de nossa comunidade local, Jampa Ruby, e de poder contribuir com o que venho aprendendo.</summary></entry><entry><title type="html">Arquitetura de branching para desenvolvimento com Git</title><link href="https://bpaulino.com/entries/2-arquitetura-de-branching-para-desenvolvimento-com-git" rel="alternate" type="text/html" title="Arquitetura de branching para desenvolvimento com Git" /><published>2016-03-10T00:00:00+00:00</published><updated>2016-03-10T00:00:00+00:00</updated><id>https://bpaulino.com/entries/arquitetura-de-branching-para-desenvolvimento-com-git</id><content type="html" xml:base="https://bpaulino.com/entries/2-arquitetura-de-branching-para-desenvolvimento-com-git">&lt;p&gt;Visando implementar um padrão mais sólido e fácil de gerenciar nossos
repositórios na &lt;a href=&quot;http://www.pm.pb.gov.br&quot;&gt;Policia Militar da Paraíba&lt;/a&gt;,
resolvemos adotar uma arquitetura de branching baseada no artigo de
&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;Vincent Driessen&lt;/a&gt; o
qual já foi testado e aprovado em diversas empresas mundo a fora. Esse artigo
será, praticamente, uma tradução da nossa fonte, com o objetivo de facilitar o
aprendizado e a integração de novos membros em nossa equipe. Esse artigo exige
que o leitor possua conhecimentos sobre Git. Se ainda não conhece Git, recomento
a leitura do livro de
&lt;a href=&quot;https://www.learnenough.com/git-tutorial&quot;&gt;Learn Enough Git to Be Dangerous&lt;/a&gt;
escrito por &lt;a href=&quot;http://www.michaelhartl.com/&quot;&gt;Michael Hartl&lt;/a&gt; o qual possui uma
didática incrível para iniciantes. O livro é gratuito o pode ser lido no próprio
navegador. Se preferir um livro em Português, o leitor pode adquirir o livro
&lt;a href=&quot;https://www.casadocodigo.com.br/pages/sumario-git-github&quot;&gt;Controlando versões com Git e Github&lt;/a&gt;
disponível na Casa do Código. Não li esse livro, porém recebi boas
recomendações.&lt;/p&gt;

&lt;h3 id=&quot;repositório-central&quot;&gt;Repositório Central&lt;/h3&gt;

&lt;p&gt;Em nosso repositório central(origin), temos duas branches que sempre existirão
no ciclo de vida de nossas aplicações. Elas são:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;develop&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A branch &lt;strong&gt;origin/master&lt;/strong&gt; será sempre nosso código-fonte que está em produção.&lt;/p&gt;

&lt;p&gt;em paralelo a &lt;strong&gt;master&lt;/strong&gt; branch, teremos a branch &lt;strong&gt;origin/develop&lt;/strong&gt; que sempre
refletirá todas as novas funcionalidades implementadas para o proximo release.
Sempre que tivermos uma versão estável em origin/develop, estamos prontos para
realizar um merge em &lt;strong&gt;origin/master&lt;/strong&gt; colocando uma tag com o número do
release.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;text-align: center; display: block; font-weight: bold&quot;&gt;
   Ilustração da arquitetura de branching
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/git_branch_architecture.jpg&quot; alt=&quot;Ilustração da arquitetura de branching&quot; /&gt;
Fonte:
&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;A successful Git branching model&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;branches-de-suporte&quot;&gt;Branches de suporte&lt;/h3&gt;

&lt;p&gt;enquanto as branches &lt;strong&gt;origin/master&lt;/strong&gt; e &lt;strong&gt;origin/develop&lt;/strong&gt; são as principais e
sempre estarão presentes, nós usaremos as branches de suporte para implementar
novas funcionalidades, corrigir eventuais problemas que surgirem em produção e
criar novos releases. Essas branches sempre terão um tempo de vida limitado,
pois iremos removê-las assim que não forem mais necessárias. As branches que
podemos usar serão:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Features branches&lt;/strong&gt; (branches de implementação de novas funcionalidades)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Release branches&lt;/strong&gt; (branches criadas para novos releases(entregas) para
produção)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hotfix branches&lt;/strong&gt; (branches criadas para correções de bugs existentes em
produção)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cada branch dessa tem um propósito específico e seguem regras que informam de
onde devem ser criadas e para onde devem ser mergidas(target branches). Iremos
descrever um pouco sobre qual o papel de cada tipo de branch e como elas devem
se comportar.&lt;/p&gt;

&lt;h3 id=&quot;feature-branches&quot;&gt;Feature Branches&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Podem ser criadas a partir de:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;develop&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Devem ser mergidas em:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;develop&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Convenção para nomeação das branches&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;QUALQUER NOME&lt;/strong&gt;, exceto &lt;strong&gt;master&lt;/strong&gt;, &lt;strong&gt;develop&lt;/strong&gt;, &lt;strong&gt;release-*&lt;/strong&gt; ou
&lt;strong&gt;hotfix-*&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feature branches são utilizadas para desenvolvimento de novas funcionalidades
para um futuro release(entrega). O objetivo principal é que essa branch exista
enquanto essa nova funcionalidade estiver em desenvolvimento onde, no futuro,
será mergiada na branch &lt;strong&gt;origin/develop&lt;/strong&gt; para que essa nova funcionalidade
esteja disponível em um novo release o será descartada em caso dessa nova
funcionalidade não seja mais necessária. &lt;strong&gt;Features Branches&lt;/strong&gt; geralmente não
estarão disponíveis no repositório central(origin) e sim no repositório local do
desenvolvedor.&lt;/p&gt;

&lt;h5 id=&quot;criação-de-uma-feature-branch&quot;&gt;Criação de uma Feature Branch&lt;/h5&gt;

&lt;p&gt;quando iniciarmos nosso trabalho em uma nova funcionalidade, iremos criar essa
nova branch a partir de &lt;strong&gt;develop&lt;/strong&gt; com o seguinte comando:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; feature-name develop
  &lt;span class=&quot;c&quot;&gt;# criação da branch 'feature-name'&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# e checkout para 'feature-branch'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Agora estamos aptos a criar nossa funcionalidade nessa nova branch. Ao termino
da implementação da nova funcionalidade, devemos mergear nossas modificações em
&lt;strong&gt;develop&lt;/strong&gt; para um futuro release. podemos seguir os seguintes comandos:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git add &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mensagem objetiva e direta sobre a funcionalidade&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout develop
  &lt;span class=&quot;c&quot;&gt;# checkout na branch develop&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git pull
  &lt;span class=&quot;c&quot;&gt;# Recuperando novas atualizações que estão em origin/develop(repositório central) e mergindo em nossa branch develop local&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt; feature-name
  &lt;span class=&quot;c&quot;&gt;# mergindo nossa feature branch em develop usando o parametro --no-ff para não perdermos informações sobre o histórico de commits da nossa feature branch. O histórico não é perdido, mas sim mergido na branch develop onde, em uma futura consulta, irá sugerir que trabalhamos diretamente em develop, onde não estaria correto.&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; feature-name
  &lt;span class=&quot;c&quot;&gt;# excluindo a nossa feature-branch localmente&lt;/span&gt;
  git push origin develop
  &lt;span class=&quot;c&quot;&gt;# enviando nossas modificações que incluimos em develop para o repositório central(origin/develop)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Usando o parâmetro &lt;strong&gt;–no-ff&lt;/strong&gt; nos ajudará a visualizar o histórico de commits
que foram implementados nessa nova funcionalidade. mantendo o histórico dessa
branch separado de &lt;strong&gt;develop&lt;/strong&gt;, facilitando uma futura consulta.&lt;/p&gt;

&lt;h3 id=&quot;release-branches&quot;&gt;Release Branches&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Podem ser criadas a partir de:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;develop&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Devem ser mergidas em:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;develop&lt;/strong&gt; e &lt;strong&gt;master&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Convenção para nomeação das branches&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;release-*.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Release branches serão nossas pontes entre &lt;strong&gt;develop&lt;/strong&gt; e &lt;strong&gt;master&lt;/strong&gt;, onde iremos
corrigir os pequenos detalhes que passaram despercebidos. Essas branches serão a
nossa preparação para o próximo release de produção.&lt;/p&gt;

&lt;p&gt;Realizando essas correções na &lt;strong&gt;release branch&lt;/strong&gt;, nossa &lt;strong&gt;develop branch&lt;/strong&gt;
ficará livre para receber novas funcionalidades(feature branches) para próximas
releases.&lt;/p&gt;

&lt;p&gt;Para determinarmos o momento de criação de uma release branch, podemos adotar o
seguinte parâmetro:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Quando a branch develop estiver preparada para um novo release;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No momento em que criamos a nossa &lt;strong&gt;Release Branch&lt;/strong&gt;, devemos criar um versão
que será usada para próxima release.&lt;/p&gt;

&lt;p&gt;Release Branches são criadas a partir de develop. Por exemplo, se nossa versão
atual em produção for &lt;strong&gt;1.1.5&lt;/strong&gt; e a nossa branch &lt;strong&gt;develop&lt;/strong&gt; está pronta para um
próximo release, nós decidimos que a próxima verão será a &lt;strong&gt;1.2&lt;/strong&gt;. Então,
criaremos a &lt;strong&gt;release branch&lt;/strong&gt; que refletirá essa nova versão.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; release-1.2 develop
  &lt;span class=&quot;c&quot;&gt;# criação da branch 'release-1.2' apartir de develop&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# e checkout para 'release-1.2'&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# Apartir de agora, podemos fazer as correções necessárias e trabalhando na release branch&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;messagem objetiva&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;É proibido adicionar grandes funcionalidades nessa branch, onde só é permitido a
correção de erros e pequenos ajustes. Se precisamos adicionar novas
funcionalidades, devemos criar uma &lt;strong&gt;feature branch&lt;/strong&gt; e mergear em develop ao
termino, onde essa nova funcionalidade precisará esperar o próximo release.&lt;/p&gt;

&lt;h5 id=&quot;finalizando-trabalhos-na-release-branch&quot;&gt;Finalizando trabalhos na Release Branch&lt;/h5&gt;

&lt;p&gt;Quando finalizarmos todo o nosso trabalho de correções e ajustes na Release
Branch, precisamos mergear essa branch na &lt;strong&gt;master&lt;/strong&gt;(branch de produção). Como
todo commit na &lt;strong&gt;master&lt;/strong&gt; é um novo release por padrão, precisamos criar uma
&lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Tagging&quot;&gt;Tag&lt;/a&gt; para uma futura
referencia em nosso histórico de versões. Uma tag nada mais é que um numero de
versão que facilitará nosso controle em produção. Após a criação da &lt;strong&gt;tag&lt;/strong&gt; em
&lt;strong&gt;master&lt;/strong&gt;, precisamos mergear nossas modificações feitas na release branch em
&lt;strong&gt;develop&lt;/strong&gt;. Assim, teremos todas essas correções ja implementadas em futuros
releases. Para realizar esse processo, podemos executar os seguintes comandos:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;c&quot;&gt;# checkout na branch master&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git pull
&lt;span class=&quot;c&quot;&gt;# recuperando atualizações da master que estão no repo central&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt; release-1.2
&lt;span class=&quot;c&quot;&gt;# mergindo nova release branch em master&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; 1.2
&lt;span class=&quot;c&quot;&gt;# criação da tag para esse novo release em produção&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin master
&lt;span class=&quot;c&quot;&gt;# Atualizando a branch master no repositorio central&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Onde refletirá o novo release para produção&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Agora precisamos atualizar a branch develop com as&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# correções feitas na release branch&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout develop
&lt;span class=&quot;c&quot;&gt;# chechout na branch develop&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git pull
&lt;span class=&quot;c&quot;&gt;# recuperando atualizações de develop que estão no repo central&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt; release-1.2
&lt;span class=&quot;c&quot;&gt;# mergindo nossas modificações da branch release-1.2 em develop&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# pode ser que ocorram conflitos nesse merge. Caso ocorra,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# resolva os conflitos e faça um commit&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push origin develop
&lt;span class=&quot;c&quot;&gt;# atualizando branch develop no repositorio central(origin)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Agora podemos deletar a branch release-1.2&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; release-1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;hotfix-branches&quot;&gt;Hotfix Branches&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Podem ser criadas a partir de:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;master&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Devem ser mergidas em:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;develop&lt;/strong&gt; e &lt;strong&gt;master&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;Convenção para nomeação das branches&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;hotfix-*&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Hotfix Branches&lt;/strong&gt; são bem parecidas com &lt;strong&gt;Release Branches&lt;/strong&gt;, pois são criadas
para serem devolvidas para produção(&lt;strong&gt;master&lt;/strong&gt;), porém são branches criadas sem
planejamento, provenientes de bugs encontrados em produção. Basicamente, são
criadas quando temos um bug severo em produção e precisa ser corrigido de
&lt;strong&gt;imediato&lt;/strong&gt;. O trabalho na Hotfix Branch não impede a continuação do trabalho
de outros desenvolvedores que estão utilizando develop como base, sendo assim,
develop continua livre.&lt;/p&gt;

&lt;h5 id=&quot;criando-hotfix-branches&quot;&gt;Criando Hotfix Branches&lt;/h5&gt;

&lt;p&gt;Hotfix Branches são criados a partir da &lt;strong&gt;master&lt;/strong&gt;. Pegando como exemplo a
versão &lt;strong&gt;1.2&lt;/strong&gt; como atual em produção na &lt;strong&gt;master&lt;/strong&gt;, teremos os seguintes
comandos:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; hotfix-1.2.1 master
&lt;span class=&quot;c&quot;&gt;# criando hotfix branch apartir da master, criando um nova versão para essa correção&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Agora podemos trabalhar na correção do bug encontrado em produção&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mensagem objetiva&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;finalizando-correções-na-hotfix-branch&quot;&gt;Finalizando correções na Hotfix Branch&lt;/h5&gt;

&lt;p&gt;Ao termino da correção do &lt;strong&gt;bug&lt;/strong&gt;, precisamos mergear essas alterações na
&lt;strong&gt;master&lt;/strong&gt;, porém precisamos mergear essas novas correções em &lt;strong&gt;develop&lt;/strong&gt; para
inclusão em novos releases. podemos executar os seguintes comandos:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git pull
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt; hotfix-1.2.1
&lt;span class=&quot;c&quot;&gt;# mergindo alterações da hotfix branch na master&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git tag &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; 1.2.1
&lt;span class=&quot;c&quot;&gt;# Criando nova tag para refletir a nova versão com as correções&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Agora precisamos adicionar essas correções em develop&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout develop
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git pull
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge &lt;span class=&quot;nt&quot;&gt;--no-ff&lt;/span&gt; hotfix-1.2.1

&lt;span class=&quot;c&quot;&gt;# pro fim, remova a hotfix branch&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; hotfix-1.2.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ATENÇÃO&lt;/strong&gt;: Se existir uma &lt;strong&gt;RELEASE BRANCH&lt;/strong&gt; na hora de mergear a &lt;strong&gt;hotfix
branch&lt;/strong&gt; na &lt;strong&gt;master&lt;/strong&gt;, devemos mergear essa &lt;strong&gt;hotfix branch&lt;/strong&gt; na &lt;strong&gt;atual
release branch&lt;/strong&gt;, ao invés de &lt;strong&gt;develop&lt;/strong&gt;. Como ao termino do merge da &lt;strong&gt;release
branch&lt;/strong&gt; na &lt;strong&gt;master&lt;/strong&gt;, temos que mergear a &lt;strong&gt;release branch&lt;/strong&gt; em &lt;strong&gt;develop&lt;/strong&gt;,
&lt;strong&gt;develop&lt;/strong&gt; receberá essas atualizações. Se por acaso nossa &lt;strong&gt;develop&lt;/strong&gt; branch
precisar dessas correções &lt;strong&gt;IMEDIATAMENTE&lt;/strong&gt;, podemos mergear a hotfix branch
diretamente em develop sem problemas.&lt;/p&gt;</content><author><name>Bruno Paulino</name></author><summary type="html">Visando implementar um padrão mais sólido e fácil de gerenciar nossos repositórios na Policia Militar da Paraíba, resolvemos adotar uma arquitetura de branching baseada no artigo de Vincent Driessen o qual já foi testado e aprovado em diversas empresas mundo a fora. Esse artigo será, praticamente, uma tradução da nossa fonte, com o objetivo de facilitar o aprendizado e a integração de novos membros em nossa equipe. Esse artigo exige que o leitor possua conhecimentos sobre Git. Se ainda não conhece Git, recomento a leitura do livro de Learn Enough Git to Be Dangerous escrito por Michael Hartl o qual possui uma didática incrível para iniciantes. O livro é gratuito o pode ser lido no próprio navegador. Se preferir um livro em Português, o leitor pode adquirir o livro Controlando versões com Git e Github disponível na Casa do Código. Não li esse livro, porém recebi boas recomendações.</summary></entry><entry><title type="html">iOS push notifications for Rails Developers</title><link href="https://bpaulino.com/entries/1-ios-push-notifications-for-rails-developers" rel="alternate" type="text/html" title="iOS push notifications for Rails Developers" /><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><id>https://bpaulino.com/entries/ios-push-notifications-for-rails-developers</id><content type="html" xml:base="https://bpaulino.com/entries/1-ios-push-notifications-for-rails-developers">&lt;p&gt;While creating mobile applications, one of the the main features that we can
explore is the Notification. Basically, there are two types of notification:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Local Notifications: Are stored on the phone and there is no need for internet
connection.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push Notifications: We need to implement a service in our backend to send
those messages to the Apple Push Notification Service(APNS), which will send
the notification to the client’s device.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my last iOS App, I needed this feature working well with my backend, a Rails
application, and I feel like I will have to read those steps again in the future
to refresh my memory. The focus here is just about Push Notifications. I will
write a post about Local Notifications.&lt;/p&gt;

&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Xcode 6.4 or higher&lt;/li&gt;
  &lt;li&gt;Apple Developer Account&lt;/li&gt;
  &lt;li&gt;iPhone, iPad or iPod (The iOS Simulator does not allow Push Notifications)&lt;/li&gt;
  &lt;li&gt;iOS 8 or higher&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;walkthrough&quot;&gt;Walkthrough&lt;/h3&gt;

&lt;p&gt;To reach our goal, we need to follow the following steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Send the device token to our backend(each device has a unique token for each
application)&lt;/li&gt;
  &lt;li&gt;Setup our iOS app to receive Push Notifications&lt;/li&gt;
  &lt;li&gt;Setup SSL Certificates on the Apple Dev portal&lt;/li&gt;
  &lt;li&gt;Setup our backend application using the &lt;a href=&quot;https://github.com/jpoz/APNS&quot;&gt;APNS&lt;/a&gt;
gem.&lt;/li&gt;
  &lt;li&gt;Send notifications from our Backend to APNS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-step-ios-app&quot;&gt;#1 Step: iOS App&lt;/h2&gt;

&lt;p&gt;We need to ask user permission to send him notifications. We can do it with the
following code:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;c1&quot;&gt;// Register for push notifications&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notificationTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIUserNotificationType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Badge&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Sound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Alert&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;notificationSettings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIUserNotificationSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notificationTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registerUserNotificationSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notificationSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// Ask user permission&lt;/span&gt;
   &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registerForRemoteNotifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As soon as our application starts, it will popup an alert and ask the user if he
allows us to send notifications. For now on, we need to get the device token and
send it to out backend.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didRegisterForRemoteNotificationsWithDeviceToken&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;deviceToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// Create and Store the device token on local database and send&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// Token to backend API&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 1:&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// remove &quot;&amp;lt;&quot; and &quot;&amp;gt;&quot; from the string&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trimEnds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringByTrimmingCharactersInSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSCharacterSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;charactersInString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 2:&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// remove spaces&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cleanToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trimEnds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringByReplacingOccurrencesOfString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

 &lt;span class=&quot;c1&quot;&gt;//Send the cleanToken to your WebServer(network call)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// If the user does not allow push notifications, this method will be called&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFailToRegisterForRemoteNotificationsWithError&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to get token. Error: %@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt;: We have to notice that the device token can be changed at any time.
Apple can assign a new token at any moment, so we should always check if the
device token is updated in our backend. I will show you how to get this token,
but how to update it in your backend is up to you.&lt;/p&gt;

&lt;h2 id=&quot;2-step-request-ssl-certificates&quot;&gt;#2 Step: Request SSL Certificates&lt;/h2&gt;

&lt;p&gt;We have to create a App ID for our iOS App. Go to the
&lt;a href=&quot;https://developer.apple.com/account/ios/identifiers/bundle/bundleList.action&quot;&gt;Apple Dev Portal - Apple App ID Page&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Alert: We have to create an “Explicit App ID” because anything different than
that will not allow us to use the Push Notification Service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When filling the and remember to check “Push Notifications” in the “App
Services” area. Get done with the form, go to the App ID list and select the App
ID that was just created and click &lt;strong&gt;edit&lt;/strong&gt; to generate the SSL Certificates.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/certificate_generation.jpg&quot; alt=&quot;Certificate generation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Those SSL Certificates will be used in our Backend to authenticate with &lt;em&gt;Apple
Push Notification Service(APNS)&lt;/em&gt;. Click in &lt;strong&gt;create certificate&lt;/strong&gt; for both
&lt;strong&gt;Development SSL Certificate&lt;/strong&gt; and &lt;strong&gt;Production SSL Certificate&lt;/strong&gt; because we
will need a certificate for each environment(Development and Production). Follow
the creation instructions for each certificate and download both the
&lt;strong&gt;Development SSL Certificate&lt;/strong&gt; and &lt;strong&gt;Production SSL Certificate&lt;/strong&gt;. After
download it, double click each one to add them to the Keychain Access.&lt;/p&gt;

&lt;h2 id=&quot;3-step-export-ssl-certificates-from-keychain&quot;&gt;#3 Step: Export SSL Certificates from Keychain&lt;/h2&gt;

&lt;p&gt;Now that we have our certificates, we have to convert them in a format the is
compatible with our backend. We ca do it following the steps bellow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1: Open the Keychain;&lt;/li&gt;
  &lt;li&gt;2: Select “Certificates”&lt;/li&gt;
  &lt;li&gt;3: Right click over the certificate where you see something like this: &lt;strong&gt;Apple
Development Push Services: com.yourname.appname&lt;/strong&gt; and click on &lt;strong&gt;Export&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;4: On the dialog box, make sure to select &lt;strong&gt;Personal Information
Exchange(.p12)&lt;/strong&gt; format before save.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/exporting_certificates.jpg&quot; alt=&quot;Exporting Certificates&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Repeat the same steps for the &lt;strong&gt;production certificate&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;4-step-convert-certificates-to-pem-format&quot;&gt;#4 Step: Convert certificates to .pem format&lt;/h1&gt;

&lt;p&gt;Based on the &lt;a href=&quot;https://github.com/jpoz/APNS&quot;&gt;APNS&lt;/a&gt; gem documentation, we open the
terminal and execute the following commands inside the folder where the
certificates are:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Development&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl pkcs12 &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; development.p12 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; development.pem &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-clcerts&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Production&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl pkcs12 &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; production.p12 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; production.pem &lt;span class=&quot;nt&quot;&gt;-nodes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-clcerts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-step-install-the-apns-gem&quot;&gt;#5 Step: Install the APNS gem&lt;/h2&gt;

&lt;p&gt;Assuming we already have our Rails backend with a Device model with the token
string, we are going to send out our notifications from the server to the APNS
in out controller. In this example, I will simulate the creating of a blog post
that will send a notification to the users that are using the blog app for iOS.&lt;/p&gt;

&lt;p&gt;First, add the APNS gem in your Gemfile:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apns&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, in the terminal, execute:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-step-setup-environment-development-and-production&quot;&gt;#6 Step: Setup Environment (Development and Production)&lt;/h2&gt;

&lt;p&gt;While our iOS App is still in development, we need to send notifications to the
APNS host: &lt;em&gt;gateway.sandbox.push.apple.com&lt;/em&gt; using the &lt;strong&gt;development.pem&lt;/strong&gt;
certificate. However, after submitting the App to the App Store, we need to send
push notifications to the APNS host: &lt;em&gt;gateway.push.apple.com&lt;/em&gt; using the
&lt;strong&gt;production.pem certificate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Copy and paste the &lt;strong&gt;development.pem&lt;/strong&gt; and &lt;strong&gt;production.pem&lt;/strong&gt; files in your
Rails app folder. fell free to put it wherever you want, just make sure to know
the path for those files. Create a file called &lt;em&gt;config/initializers/apns.rb&lt;/em&gt; and
put this code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/initializers/apns.rb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Default value is 'gateway.sandbox.push.apple.com'&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;APNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gateway.sandbox.push.apple.com&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Path to your development.pem file&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;APNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;development.pem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# if your iOS App is available on the App Store, Use the production.pem&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# and change the host&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;production?&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;APNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gateway.push.apple.com&quot;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;APNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;production.pem&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;7-step-send-push-notifications&quot;&gt;#7 Step: Send Push Notifications&lt;/h2&gt;

&lt;p&gt;Now that we have our environment already set up, we can easily send out the
notifications:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Get all devices stored on your database&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# or filter based on your criteria&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notifications&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;APNS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;alert: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;other: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Here, you can pass custom info to your app'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;APNS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send_notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notifications&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_params&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;#@ Last Step: Receive the Notifications on the iOS App&lt;/p&gt;

&lt;p&gt;Remember that we need an Apple Device to test this feature. We just need to
implement a delegate method in the AppDelegate.swift&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didReceiveRemoteNotification&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Do whatever you want with this notification&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Ex: Reload data from server&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remote Notification: %@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;we-are-done&quot;&gt;We are done!&lt;/h1&gt;

&lt;p&gt;Remember that the Apple Push Notification Service does not guarantee the
delivery of those notifications, which means that you can not really on those
notifications. the
&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Introduction.html&quot;&gt;Apple Docs&lt;/a&gt;
is pretty cool. You should give it a shot.&lt;/p&gt;</content><author><name>Bruno</name></author><summary type="html">While creating mobile applications, one of the the main features that we can explore is the Notification. Basically, there are two types of notification:</summary></entry></feed>